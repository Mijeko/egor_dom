<?php

namespace Craft\Area\Entity;

use Bitrix\Main\ORM\Data\DataManager;
use Bitrix\Main\ORM\Fields\IntegerField;
use Bitrix\Main\ORM\Fields\Relations\Reference;
use Bitrix\Main\ORM\Fields\TextField;
use Bitrix\Main\ORM\Query\Join;

class AreaContentTable extends DataManager
{

	const FIELD_AREA_ID = 'AREA_ID';
	const FIELD_AREA_FIELD_ID = 'AREA_BLOCK_ID';
	const FIELD_VALUE = 'VALUE';

	const R_AREA = 'AREA';
	const R_FIELD = 'FIELD';

	public static function getTableName()
	{
		return 'craft_area_content';
	}

	public static function getMap()
	{
		return [
			(new IntegerField(self::FIELD_AREA_ID))
				->configureTitle('ID области')
				->configurePrimary()
				->configureUnique()
				->configureRequired(),
			(new IntegerField(self::FIELD_AREA_FIELD_ID))
				->configureTitle('ID поля')
				->configurePrimary()
				->configureUnique()
				->configureRequired(),
			(new TextField(self::FIELD_VALUE))
				->configureTitle('Значение')
				->configureRequired(),


			// RELATIONS
			(new Reference(self::R_AREA, AreaTable::class, Join::on('this.' . self::FIELD_AREA_ID, 'ref.' . AreaTable::FIELD_ID)))
				->configureJoinType('inner'),
			(new Reference(self::R_FIELD, AreaFieldTable::class, Join::on('this.' . self::FIELD_AREA_FIELD_ID, 'ref.' . AreaFieldTable::FIELD_ID)))
				->configureJoinType('inner'),
		];
	}

	public static function getObjectClass()
	{
		return AreaContent::class;
	}

	public static function delete($primary)
	{
		$content = self::getByPrimary($primary)->fetchObject();

		if($content)
		{
			$block = $content->fillBlock();
			if($block && $block->getType() == AreaField::BLOCK_TYPE_IMAGE)
			{
				$imageData = $content->getValueEx();
				if(!empty($imageData['ID']))
				{
					\CFile::Delete($imageData['ID']);
				}
			}
		}

		return parent::delete($primary); // TODO: Change the autogenerated stub
	}
}