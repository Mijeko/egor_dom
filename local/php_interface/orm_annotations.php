<?php

/* ORMENTITYANNOTATION:Jedi\Area\Entity\AreaTable */
namespace Craft\Area\Entity {
	/**
	 * Area
	 * @see \Craft\Area\Entity\AreaTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\Area\Entity\Area setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Craft\Area\Entity\Area setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\Area\Entity\Area resetName()
	 * @method \Craft\Area\Entity\Area unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Craft\Area\Entity\Area setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Craft\Area\Entity\Area resetCode()
	 * @method \Craft\Area\Entity\Area unsetCode()
	 * @method \string fillCode()
	 * @method \boolean getActive()
	 * @method \Craft\Area\Entity\Area setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\Area\Entity\Area resetActive()
	 * @method \Craft\Area\Entity\Area unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Craft\Area\Entity\Area setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\Area\Entity\Area resetSort()
	 * @method \Craft\Area\Entity\Area unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\Area\Entity\Area setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\Area\Entity\Area resetCreatedAt()
	 * @method \Craft\Area\Entity\Area unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Craft\Area\Entity\Area setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Craft\Area\Entity\Area resetUpdatedAt()
	 * @method \Craft\Area\Entity\Area unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 * @method \Craft\Area\Entity\AreaFieldCollection getFields()
	 * @method \Craft\Area\Entity\AreaFieldCollection requireFields()
	 * @method \Craft\Area\Entity\AreaFieldCollection fillFields()
	 * @method bool hasFields()
	 * @method bool isFieldsFilled()
	 * @method bool isFieldsChanged()
	 * @method void addToFields(\Craft\Area\Entity\AreaField $areaField)
	 * @method void removeFromFields(\Craft\Area\Entity\AreaField $areaField)
	 * @method void removeAllFields()
	 * @method \Craft\Area\Entity\Area resetFields()
	 * @method \Craft\Area\Entity\Area unsetFields()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection getContent()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection requireContent()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection fillContent()
	 * @method bool hasContent()
	 * @method bool isContentFilled()
	 * @method bool isContentChanged()
	 * @method void addToContent(\Craft\Area\Entity\AreaContent $areaContent)
	 * @method void removeFromContent(\Craft\Area\Entity\AreaContent $areaContent)
	 * @method void removeAllContent()
	 * @method \Craft\Area\Entity\Area resetContent()
	 * @method \Craft\Area\Entity\Area unsetContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Area\Entity\Area set($fieldName, $value)
	 * @method \Craft\Area\Entity\Area reset($fieldName)
	 * @method \Craft\Area\Entity\Area unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Area\Entity\Area wakeUp($data)
	 */
	class EO_Area {
		/* @var \Craft\Area\Entity\AreaTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Area\Entity {
	/**
	 * AreaCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 * @method \Craft\Area\Entity\AreaFieldCollection[] getFieldsList()
	 * @method \Craft\Area\Entity\AreaFieldCollection getFieldsCollection()
	 * @method \Craft\Area\Entity\AreaFieldCollection fillFields()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection[] getContentList()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection getContentCollection()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection fillContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Area\Entity\Area $object)
	 * @method bool has(\Craft\Area\Entity\Area $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Area\Entity\Area getByPrimary($primary)
	 * @method \Craft\Area\Entity\Area[] getAll()
	 * @method bool remove(\Craft\Area\Entity\Area $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Area\Entity\AreaCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Area\Entity\Area current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Area\Entity\AreaCollection merge(?\Craft\Area\Entity\AreaCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Area_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Area\Entity\AreaTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaTable';
	}
}
namespace Craft\Area\Entity {
	/**
	 * @method static EO_Area_Query query()
	 * @method static EO_Area_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_Area_Result getById($id)
	 * @method static EO_Area_Result getList(array $parameters = [])
	 * @method static EO_Area_Entity getEntity()
	 * @method static \Craft\Area\Entity\Area createObject($setDefaultValues = true)
	 * @method static \Craft\Area\Entity\AreaCollection createCollection()
	 * @method static \Craft\Area\Entity\Area wakeUpObject($row)
	 * @method static \Craft\Area\Entity\AreaCollection wakeUpCollection($rows)
	 */
	class AreaTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Area_Result exec()
	 * @method \Craft\Area\Entity\Area fetchObject()
	 * @method \Craft\Area\Entity\AreaCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Area_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Area\Entity\Area fetchObject()
	 * @method \Craft\Area\Entity\AreaCollection fetchCollection()
	 */
	class EO_Area_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Area\Entity\Area createObject($setDefaultValues = true)
	 * @method \Craft\Area\Entity\AreaCollection createCollection()
	 * @method \Craft\Area\Entity\Area wakeUpObject($row)
	 * @method \Craft\Area\Entity\AreaCollection wakeUpCollection($rows)
	 */
	class EO_Area_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Jedi\Area\Entity\AreaBlockTable */
namespace Craft\Area\Entity {
	/**
	 * AreaBlock
	 * @see \Craft\Area\Entity\AreaBlockTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\Area\Entity\AreaBlock setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAreaId()
	 * @method \Craft\Area\Entity\AreaBlock setAreaId(\int|\Bitrix\Main\DB\SqlExpression $areaId)
	 * @method bool hasAreaId()
	 * @method bool isAreaIdFilled()
	 * @method bool isAreaIdChanged()
	 * @method \int remindActualAreaId()
	 * @method \int requireAreaId()
	 * @method \Craft\Area\Entity\AreaBlock resetAreaId()
	 * @method \Craft\Area\Entity\AreaBlock unsetAreaId()
	 * @method \int fillAreaId()
	 * @method \string getType()
	 * @method \Craft\Area\Entity\AreaBlock setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Craft\Area\Entity\AreaBlock resetType()
	 * @method \Craft\Area\Entity\AreaBlock unsetType()
	 * @method \string fillType()
	 * @method \string getName()
	 * @method \Craft\Area\Entity\AreaBlock setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\Area\Entity\AreaBlock resetName()
	 * @method \Craft\Area\Entity\AreaBlock unsetName()
	 * @method \string fillName()
	 * @method \int getSort()
	 * @method \Craft\Area\Entity\AreaBlock setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\Area\Entity\AreaBlock resetSort()
	 * @method \Craft\Area\Entity\AreaBlock unsetSort()
	 * @method \int fillSort()
	 * @method \string getCode()
	 * @method \Craft\Area\Entity\AreaBlock setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Craft\Area\Entity\AreaBlock resetCode()
	 * @method \Craft\Area\Entity\AreaBlock unsetCode()
	 * @method \string fillCode()
	 * @method \boolean getActive()
	 * @method \Craft\Area\Entity\AreaBlock setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\Area\Entity\AreaBlock resetActive()
	 * @method \Craft\Area\Entity\AreaBlock unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getMultiple()
	 * @method \Craft\Area\Entity\AreaBlock setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Craft\Area\Entity\AreaBlock resetMultiple()
	 * @method \Craft\Area\Entity\AreaBlock unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \Craft\Area\Entity\Area getArea()
	 * @method \Craft\Area\Entity\Area remindActualArea()
	 * @method \Craft\Area\Entity\Area requireArea()
	 * @method \Craft\Area\Entity\AreaBlock setArea(\Craft\Area\Entity\Area $object)
	 * @method \Craft\Area\Entity\AreaBlock resetArea()
	 * @method \Craft\Area\Entity\AreaBlock unsetArea()
	 * @method bool hasArea()
	 * @method bool isAreaFilled()
	 * @method bool isAreaChanged()
	 * @method \Craft\Area\Entity\Area fillArea()
	 * @method \Craft\Area\Entity\AreaBlockContent getContent()
	 * @method \Craft\Area\Entity\AreaBlockContent remindActualContent()
	 * @method \Craft\Area\Entity\AreaBlockContent requireContent()
	 * @method \Craft\Area\Entity\AreaBlock setContent(\Craft\Area\Entity\AreaBlockContent $object)
	 * @method \Craft\Area\Entity\AreaBlock resetContent()
	 * @method \Craft\Area\Entity\AreaBlock unsetContent()
	 * @method bool hasContent()
	 * @method bool isContentFilled()
	 * @method bool isContentChanged()
	 * @method \Craft\Area\Entity\AreaBlockContent fillContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Area\Entity\AreaBlock set($fieldName, $value)
	 * @method \Craft\Area\Entity\AreaBlock reset($fieldName)
	 * @method \Craft\Area\Entity\AreaBlock unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Area\Entity\AreaBlock wakeUp($data)
	 */
	class EO_AreaBlock {
		/* @var \Craft\Area\Entity\AreaBlockTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaBlockTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Area\Entity {
	/**
	 * AreaBlockCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAreaIdList()
	 * @method \int[] fillAreaId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \Craft\Area\Entity\Area[] getAreaList()
	 * @method \Craft\Area\Entity\AreaBlockCollection getAreaCollection()
	 * @method \Craft\Area\Entity\AreaCollection fillArea()
	 * @method \Craft\Area\Entity\AreaBlockContent[] getContentList()
	 * @method \Craft\Area\Entity\AreaBlockCollection getContentCollection()
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection fillContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Area\Entity\AreaBlock $object)
	 * @method bool has(\Craft\Area\Entity\AreaBlock $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaBlock getByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaBlock[] getAll()
	 * @method bool remove(\Craft\Area\Entity\AreaBlock $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Area\Entity\AreaBlockCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Area\Entity\AreaBlock current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Area\Entity\AreaBlockCollection merge(?\Craft\Area\Entity\AreaBlockCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_AreaBlock_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Area\Entity\AreaBlockTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaBlockTable';
	}
}
namespace Craft\Area\Entity {
	/**
	 * @method static EO_AreaBlock_Query query()
	 * @method static EO_AreaBlock_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_AreaBlock_Result getById($id)
	 * @method static EO_AreaBlock_Result getList(array $parameters = [])
	 * @method static EO_AreaBlock_Entity getEntity()
	 * @method static \Craft\Area\Entity\AreaBlock createObject($setDefaultValues = true)
	 * @method static \Craft\Area\Entity\AreaBlockCollection createCollection()
	 * @method static \Craft\Area\Entity\AreaBlock wakeUpObject($row)
	 * @method static \Craft\Area\Entity\AreaBlockCollection wakeUpCollection($rows)
	 */
	class AreaBlockTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AreaBlock_Result exec()
	 * @method \Craft\Area\Entity\AreaBlock fetchObject()
	 * @method \Craft\Area\Entity\AreaBlockCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AreaBlock_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Area\Entity\AreaBlock fetchObject()
	 * @method \Craft\Area\Entity\AreaBlockCollection fetchCollection()
	 */
	class EO_AreaBlock_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Area\Entity\AreaBlock createObject($setDefaultValues = true)
	 * @method \Craft\Area\Entity\AreaBlockCollection createCollection()
	 * @method \Craft\Area\Entity\AreaBlock wakeUpObject($row)
	 * @method \Craft\Area\Entity\AreaBlockCollection wakeUpCollection($rows)
	 */
	class EO_AreaBlock_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Blog\CommentTable */
namespace Bitrix\Blog {
	/**
	 * EO_Comment
	 * @see \Bitrix\Blog\CommentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getUfBlogCommentDoc()
	 * @method \string remindActualUfBlogCommentDoc()
	 * @method \string requireUfBlogCommentDoc()
	 * @method bool hasUfBlogCommentDoc()
	 * @method bool isUfBlogCommentDocFilled()
	 * @method \Bitrix\Blog\EO_Comment unsetUfBlogCommentDoc()
	 * @method \string fillUfBlogCommentDoc()
	 * @method \Bitrix\Blog\EO_Comment setUfBlogCommentDoc(\string[] $ufBlogCommentDoc)
	 * @method bool isUfBlogCommentDocChanged()
	 * @method \int getUfBlogCommUrlPrv()
	 * @method \int remindActualUfBlogCommUrlPrv()
	 * @method \int requireUfBlogCommUrlPrv()
	 * @method bool hasUfBlogCommUrlPrv()
	 * @method bool isUfBlogCommUrlPrvFilled()
	 * @method \Bitrix\Blog\EO_Comment unsetUfBlogCommUrlPrv()
	 * @method \int fillUfBlogCommUrlPrv()
	 * @method \Bitrix\Blog\EO_Comment setUfBlogCommUrlPrv(\int $ufBlogCommUrlPrv)
	 * @method bool isUfBlogCommUrlPrvChanged()
	 */
	class EO_Comment {
		/* @var \Bitrix\Blog\CommentTable */
		static public $dataClass = '\Bitrix\Blog\CommentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Blog {
	/**
	 * EO_Comment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getUfBlogCommentDocList()
	 * @method \string[] fillUfBlogCommentDoc()
	 * @method \int[] getUfBlogCommUrlPrvList()
	 * @method \int[] fillUfBlogCommUrlPrv()
	 */
	class EO_Comment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Blog\CommentTable */
		static public $dataClass = '\Bitrix\Blog\CommentTable';
	}
}
/* ORMENTITYANNOTATION:Bitrix\Blog\PostTable */
namespace Bitrix\Blog {
	/**
	 * EO_Post
	 * @see \Bitrix\Blog\PostTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getUfBlogPostDoc()
	 * @method \string remindActualUfBlogPostDoc()
	 * @method \string requireUfBlogPostDoc()
	 * @method bool hasUfBlogPostDoc()
	 * @method bool isUfBlogPostDocFilled()
	 * @method \Bitrix\Blog\EO_Post unsetUfBlogPostDoc()
	 * @method \string fillUfBlogPostDoc()
	 * @method \Bitrix\Blog\EO_Post setUfBlogPostDoc(\string[] $ufBlogPostDoc)
	 * @method bool isUfBlogPostDocChanged()
	 * @method \int getUfBlogPostUrlPrv()
	 * @method \int remindActualUfBlogPostUrlPrv()
	 * @method \int requireUfBlogPostUrlPrv()
	 * @method bool hasUfBlogPostUrlPrv()
	 * @method bool isUfBlogPostUrlPrvFilled()
	 * @method \Bitrix\Blog\EO_Post unsetUfBlogPostUrlPrv()
	 * @method \int fillUfBlogPostUrlPrv()
	 * @method \Bitrix\Blog\EO_Post setUfBlogPostUrlPrv(\int $ufBlogPostUrlPrv)
	 * @method bool isUfBlogPostUrlPrvChanged()
	 * @method \int getUfGratitude()
	 * @method \int remindActualUfGratitude()
	 * @method \int requireUfGratitude()
	 * @method bool hasUfGratitude()
	 * @method bool isUfGratitudeFilled()
	 * @method \Bitrix\Blog\EO_Post unsetUfGratitude()
	 * @method \int fillUfGratitude()
	 * @method \Bitrix\Blog\EO_Post setUfGratitude(\int $ufGratitude)
	 * @method bool isUfGratitudeChanged()
	 */
	class EO_Post {
		/* @var \Bitrix\Blog\PostTable */
		static public $dataClass = '\Bitrix\Blog\PostTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Blog {
	/**
	 * EO_Post_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getUfBlogPostDocList()
	 * @method \string[] fillUfBlogPostDoc()
	 * @method \int[] getUfBlogPostUrlPrvList()
	 * @method \int[] fillUfBlogPostUrlPrv()
	 * @method \int[] getUfGratitudeList()
	 * @method \int[] fillUfGratitude()
	 */
	class EO_Post_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Blog\PostTable */
		static public $dataClass = '\Bitrix\Blog\PostTable';
	}
}
/* ORMENTITYANNOTATION:Bitrix\Forum\MessageTable */
namespace Bitrix\Forum {
	/**
	 * EO_Message
	 * @see \Bitrix\Forum\MessageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUfForumMesUrlPrv()
	 * @method \int remindActualUfForumMesUrlPrv()
	 * @method \int requireUfForumMesUrlPrv()
	 * @method bool hasUfForumMesUrlPrv()
	 * @method bool isUfForumMesUrlPrvFilled()
	 * @method \Bitrix\Forum\EO_Message unsetUfForumMesUrlPrv()
	 * @method \int fillUfForumMesUrlPrv()
	 * @method \Bitrix\Forum\EO_Message setUfForumMesUrlPrv(\int $ufForumMesUrlPrv)
	 * @method bool isUfForumMesUrlPrvChanged()
	 * @method \int getUfTaskCommentType()
	 * @method \int remindActualUfTaskCommentType()
	 * @method \int requireUfTaskCommentType()
	 * @method bool hasUfTaskCommentType()
	 * @method bool isUfTaskCommentTypeFilled()
	 * @method \Bitrix\Forum\EO_Message unsetUfTaskCommentType()
	 * @method \int fillUfTaskCommentType()
	 * @method \Bitrix\Forum\EO_Message setUfTaskCommentType(\int $ufTaskCommentType)
	 * @method bool isUfTaskCommentTypeChanged()
	 */
	class EO_Message {
		/* @var \Bitrix\Forum\MessageTable */
		static public $dataClass = '\Bitrix\Forum\MessageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Forum {
	/**
	 * EO_Message_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUfForumMesUrlPrvList()
	 * @method \int[] fillUfForumMesUrlPrv()
	 * @method \int[] getUfTaskCommentTypeList()
	 * @method \int[] fillUfTaskCommentType()
	 */
	class EO_Message_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Forum\MessageTable */
		static public $dataClass = '\Bitrix\Forum\MessageTable';
	}
}
/* ORMENTITYANNOTATION:Jedi\Area\Entity\AreaBlockContentTable */
namespace Craft\Area\Entity {
	/**
	 * AreaBlockContent
	 * @see \Craft\Area\Entity\AreaBlockContentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\Area\Entity\AreaBlockContent setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAreaId()
	 * @method \Craft\Area\Entity\AreaBlockContent setAreaId(\int|\Bitrix\Main\DB\SqlExpression $areaId)
	 * @method bool hasAreaId()
	 * @method bool isAreaIdFilled()
	 * @method bool isAreaIdChanged()
	 * @method \int remindActualAreaId()
	 * @method \int requireAreaId()
	 * @method \Craft\Area\Entity\AreaBlockContent resetAreaId()
	 * @method \Craft\Area\Entity\AreaBlockContent unsetAreaId()
	 * @method \int fillAreaId()
	 * @method \int getAreaBlockId()
	 * @method \Craft\Area\Entity\AreaBlockContent setAreaBlockId(\int|\Bitrix\Main\DB\SqlExpression $areaBlockId)
	 * @method bool hasAreaBlockId()
	 * @method bool isAreaBlockIdFilled()
	 * @method bool isAreaBlockIdChanged()
	 * @method \int remindActualAreaBlockId()
	 * @method \int requireAreaBlockId()
	 * @method \Craft\Area\Entity\AreaBlockContent resetAreaBlockId()
	 * @method \Craft\Area\Entity\AreaBlockContent unsetAreaBlockId()
	 * @method \int fillAreaBlockId()
	 * @method \string getValue()
	 * @method \Craft\Area\Entity\AreaBlockContent setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Craft\Area\Entity\AreaBlockContent resetValue()
	 * @method \Craft\Area\Entity\AreaBlockContent unsetValue()
	 * @method \string fillValue()
	 * @method \Craft\Area\Entity\Area getArea()
	 * @method \Craft\Area\Entity\Area remindActualArea()
	 * @method \Craft\Area\Entity\Area requireArea()
	 * @method \Craft\Area\Entity\AreaBlockContent setArea(\Craft\Area\Entity\Area $object)
	 * @method \Craft\Area\Entity\AreaBlockContent resetArea()
	 * @method \Craft\Area\Entity\AreaBlockContent unsetArea()
	 * @method bool hasArea()
	 * @method bool isAreaFilled()
	 * @method bool isAreaChanged()
	 * @method \Craft\Area\Entity\Area fillArea()
	 * @method \Craft\Area\Entity\AreaBlock getBlock()
	 * @method \Craft\Area\Entity\AreaBlock remindActualBlock()
	 * @method \Craft\Area\Entity\AreaBlock requireBlock()
	 * @method \Craft\Area\Entity\AreaBlockContent setBlock(\Craft\Area\Entity\AreaBlock $object)
	 * @method \Craft\Area\Entity\AreaBlockContent resetBlock()
	 * @method \Craft\Area\Entity\AreaBlockContent unsetBlock()
	 * @method bool hasBlock()
	 * @method bool isBlockFilled()
	 * @method bool isBlockChanged()
	 * @method \Craft\Area\Entity\AreaBlock fillBlock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Area\Entity\AreaBlockContent set($fieldName, $value)
	 * @method \Craft\Area\Entity\AreaBlockContent reset($fieldName)
	 * @method \Craft\Area\Entity\AreaBlockContent unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Area\Entity\AreaBlockContent wakeUp($data)
	 */
	class EO_AreaBlockContent {
		/* @var \Craft\Area\Entity\AreaBlockContentTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaBlockContentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Area\Entity {
	/**
	 * EO_AreaBlockContent_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAreaIdList()
	 * @method \int[] fillAreaId()
	 * @method \int[] getAreaBlockIdList()
	 * @method \int[] fillAreaBlockId()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Craft\Area\Entity\Area[] getAreaList()
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection getAreaCollection()
	 * @method \Craft\Area\Entity\AreaCollection fillArea()
	 * @method \Craft\Area\Entity\AreaBlock[] getBlockList()
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection getBlockCollection()
	 * @method \Craft\Area\Entity\AreaBlockCollection fillBlock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Area\Entity\AreaBlockContent $object)
	 * @method bool has(\Craft\Area\Entity\AreaBlockContent $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaBlockContent getByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaBlockContent[] getAll()
	 * @method bool remove(\Craft\Area\Entity\AreaBlockContent $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Area\Entity\EO_AreaBlockContent_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Area\Entity\AreaBlockContent current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection merge(?\Craft\Area\Entity\EO_AreaBlockContent_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_AreaBlockContent_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Area\Entity\AreaBlockContentTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaBlockContentTable';
	}
}
namespace Craft\Area\Entity {
	/**
	 * @method static EO_AreaBlockContent_Query query()
	 * @method static EO_AreaBlockContent_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_AreaBlockContent_Result getById($id)
	 * @method static EO_AreaBlockContent_Result getList(array $parameters = [])
	 * @method static EO_AreaBlockContent_Entity getEntity()
	 * @method static \Craft\Area\Entity\AreaBlockContent createObject($setDefaultValues = true)
	 * @method static \Craft\Area\Entity\EO_AreaBlockContent_Collection createCollection()
	 * @method static \Craft\Area\Entity\AreaBlockContent wakeUpObject($row)
	 * @method static \Craft\Area\Entity\EO_AreaBlockContent_Collection wakeUpCollection($rows)
	 */
	class AreaBlockContentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AreaBlockContent_Result exec()
	 * @method \Craft\Area\Entity\AreaBlockContent fetchObject()
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AreaBlockContent_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Area\Entity\AreaBlockContent fetchObject()
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection fetchCollection()
	 */
	class EO_AreaBlockContent_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Area\Entity\AreaBlockContent createObject($setDefaultValues = true)
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection createCollection()
	 * @method \Craft\Area\Entity\AreaBlockContent wakeUpObject($row)
	 * @method \Craft\Area\Entity\EO_AreaBlockContent_Collection wakeUpCollection($rows)
	 */
	class EO_AreaBlockContent_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Jedi\Area\Entity\AreaFieldTable */
namespace Craft\Area\Entity {
	/**
	 * AreaField
	 * @see \Craft\Area\Entity\AreaFieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\Area\Entity\AreaField setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAreaId()
	 * @method \Craft\Area\Entity\AreaField setAreaId(\int|\Bitrix\Main\DB\SqlExpression $areaId)
	 * @method bool hasAreaId()
	 * @method bool isAreaIdFilled()
	 * @method bool isAreaIdChanged()
	 * @method \int remindActualAreaId()
	 * @method \int requireAreaId()
	 * @method \Craft\Area\Entity\AreaField resetAreaId()
	 * @method \Craft\Area\Entity\AreaField unsetAreaId()
	 * @method \int fillAreaId()
	 * @method \string getType()
	 * @method \Craft\Area\Entity\AreaField setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Craft\Area\Entity\AreaField resetType()
	 * @method \Craft\Area\Entity\AreaField unsetType()
	 * @method \string fillType()
	 * @method \string getName()
	 * @method \Craft\Area\Entity\AreaField setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\Area\Entity\AreaField resetName()
	 * @method \Craft\Area\Entity\AreaField unsetName()
	 * @method \string fillName()
	 * @method \int getSort()
	 * @method \Craft\Area\Entity\AreaField setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\Area\Entity\AreaField resetSort()
	 * @method \Craft\Area\Entity\AreaField unsetSort()
	 * @method \int fillSort()
	 * @method \string getCode()
	 * @method \Craft\Area\Entity\AreaField setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Craft\Area\Entity\AreaField resetCode()
	 * @method \Craft\Area\Entity\AreaField unsetCode()
	 * @method \string fillCode()
	 * @method \boolean getActive()
	 * @method \Craft\Area\Entity\AreaField setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\Area\Entity\AreaField resetActive()
	 * @method \Craft\Area\Entity\AreaField unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getMultiple()
	 * @method \Craft\Area\Entity\AreaField setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Craft\Area\Entity\AreaField resetMultiple()
	 * @method \Craft\Area\Entity\AreaField unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \string getSettings()
	 * @method \Craft\Area\Entity\AreaField setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Craft\Area\Entity\AreaField resetSettings()
	 * @method \Craft\Area\Entity\AreaField unsetSettings()
	 * @method \string fillSettings()
	 * @method \Craft\Area\Entity\Area getArea()
	 * @method \Craft\Area\Entity\Area remindActualArea()
	 * @method \Craft\Area\Entity\Area requireArea()
	 * @method \Craft\Area\Entity\AreaField setArea(\Craft\Area\Entity\Area $object)
	 * @method \Craft\Area\Entity\AreaField resetArea()
	 * @method \Craft\Area\Entity\AreaField unsetArea()
	 * @method bool hasArea()
	 * @method bool isAreaFilled()
	 * @method bool isAreaChanged()
	 * @method \Craft\Area\Entity\Area fillArea()
	 * @method \Craft\Area\Entity\AreaContent getContent()
	 * @method \Craft\Area\Entity\AreaContent remindActualContent()
	 * @method \Craft\Area\Entity\AreaContent requireContent()
	 * @method \Craft\Area\Entity\AreaField setContent(\Craft\Area\Entity\AreaContent $object)
	 * @method \Craft\Area\Entity\AreaField resetContent()
	 * @method \Craft\Area\Entity\AreaField unsetContent()
	 * @method bool hasContent()
	 * @method bool isContentFilled()
	 * @method bool isContentChanged()
	 * @method \Craft\Area\Entity\AreaContent fillContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Area\Entity\AreaField set($fieldName, $value)
	 * @method \Craft\Area\Entity\AreaField reset($fieldName)
	 * @method \Craft\Area\Entity\AreaField unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Area\Entity\AreaField wakeUp($data)
	 */
	class EO_AreaField {
		/* @var \Craft\Area\Entity\AreaFieldTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaFieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Area\Entity {
	/**
	 * AreaFieldCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAreaIdList()
	 * @method \int[] fillAreaId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \Craft\Area\Entity\Area[] getAreaList()
	 * @method \Craft\Area\Entity\AreaFieldCollection getAreaCollection()
	 * @method \Craft\Area\Entity\AreaCollection fillArea()
	 * @method \Craft\Area\Entity\AreaContent[] getContentList()
	 * @method \Craft\Area\Entity\AreaFieldCollection getContentCollection()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection fillContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Area\Entity\AreaField $object)
	 * @method bool has(\Craft\Area\Entity\AreaField $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaField getByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaField[] getAll()
	 * @method bool remove(\Craft\Area\Entity\AreaField $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Area\Entity\AreaFieldCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Area\Entity\AreaField current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Area\Entity\AreaFieldCollection merge(?\Craft\Area\Entity\AreaFieldCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_AreaField_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Area\Entity\AreaFieldTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaFieldTable';
	}
}
namespace Craft\Area\Entity {
	/**
	 * @method static EO_AreaField_Query query()
	 * @method static EO_AreaField_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_AreaField_Result getById($id)
	 * @method static EO_AreaField_Result getList(array $parameters = [])
	 * @method static EO_AreaField_Entity getEntity()
	 * @method static \Craft\Area\Entity\AreaField createObject($setDefaultValues = true)
	 * @method static \Craft\Area\Entity\AreaFieldCollection createCollection()
	 * @method static \Craft\Area\Entity\AreaField wakeUpObject($row)
	 * @method static \Craft\Area\Entity\AreaFieldCollection wakeUpCollection($rows)
	 */
	class AreaFieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AreaField_Result exec()
	 * @method \Craft\Area\Entity\AreaField fetchObject()
	 * @method \Craft\Area\Entity\AreaFieldCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AreaField_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Area\Entity\AreaField fetchObject()
	 * @method \Craft\Area\Entity\AreaFieldCollection fetchCollection()
	 */
	class EO_AreaField_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Area\Entity\AreaField createObject($setDefaultValues = true)
	 * @method \Craft\Area\Entity\AreaFieldCollection createCollection()
	 * @method \Craft\Area\Entity\AreaField wakeUpObject($row)
	 * @method \Craft\Area\Entity\AreaFieldCollection wakeUpCollection($rows)
	 */
	class EO_AreaField_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Jedi\Area\Entity\AreaContentTable */
namespace Craft\Area\Entity {
	/**
	 * AreaContent
	 * @see \Craft\Area\Entity\AreaContentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getAreaId()
	 * @method \Craft\Area\Entity\AreaContent setAreaId(\int|\Bitrix\Main\DB\SqlExpression $areaId)
	 * @method bool hasAreaId()
	 * @method bool isAreaIdFilled()
	 * @method bool isAreaIdChanged()
	 * @method \int getAreaBlockId()
	 * @method \Craft\Area\Entity\AreaContent setAreaBlockId(\int|\Bitrix\Main\DB\SqlExpression $areaBlockId)
	 * @method bool hasAreaBlockId()
	 * @method bool isAreaBlockIdFilled()
	 * @method bool isAreaBlockIdChanged()
	 * @method \string getValue()
	 * @method \Craft\Area\Entity\AreaContent setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Craft\Area\Entity\AreaContent resetValue()
	 * @method \Craft\Area\Entity\AreaContent unsetValue()
	 * @method \string fillValue()
	 * @method \Craft\Area\Entity\Area getArea()
	 * @method \Craft\Area\Entity\Area remindActualArea()
	 * @method \Craft\Area\Entity\Area requireArea()
	 * @method \Craft\Area\Entity\AreaContent setArea(\Craft\Area\Entity\Area $object)
	 * @method \Craft\Area\Entity\AreaContent resetArea()
	 * @method \Craft\Area\Entity\AreaContent unsetArea()
	 * @method bool hasArea()
	 * @method bool isAreaFilled()
	 * @method bool isAreaChanged()
	 * @method \Craft\Area\Entity\Area fillArea()
	 * @method \Craft\Area\Entity\AreaField getField()
	 * @method \Craft\Area\Entity\AreaField remindActualField()
	 * @method \Craft\Area\Entity\AreaField requireField()
	 * @method \Craft\Area\Entity\AreaContent setField(\Craft\Area\Entity\AreaField $object)
	 * @method \Craft\Area\Entity\AreaContent resetField()
	 * @method \Craft\Area\Entity\AreaContent unsetField()
	 * @method bool hasField()
	 * @method bool isFieldFilled()
	 * @method bool isFieldChanged()
	 * @method \Craft\Area\Entity\AreaField fillField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Area\Entity\AreaContent set($fieldName, $value)
	 * @method \Craft\Area\Entity\AreaContent reset($fieldName)
	 * @method \Craft\Area\Entity\AreaContent unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Area\Entity\AreaContent wakeUp($data)
	 */
	class EO_AreaContent {
		/* @var \Craft\Area\Entity\AreaContentTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaContentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Area\Entity {
	/**
	 * EO_AreaContent_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getAreaIdList()
	 * @method \int[] getAreaBlockIdList()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Craft\Area\Entity\Area[] getAreaList()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection getAreaCollection()
	 * @method \Craft\Area\Entity\AreaCollection fillArea()
	 * @method \Craft\Area\Entity\AreaField[] getFieldList()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection getFieldCollection()
	 * @method \Craft\Area\Entity\AreaFieldCollection fillField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Area\Entity\AreaContent $object)
	 * @method bool has(\Craft\Area\Entity\AreaContent $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaContent getByPrimary($primary)
	 * @method \Craft\Area\Entity\AreaContent[] getAll()
	 * @method bool remove(\Craft\Area\Entity\AreaContent $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Area\Entity\EO_AreaContent_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Area\Entity\AreaContent current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection merge(?\Craft\Area\Entity\EO_AreaContent_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_AreaContent_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Area\Entity\AreaContentTable */
		static public $dataClass = '\Jedi\Area\Entity\AreaContentTable';
	}
}
namespace Craft\Area\Entity {
	/**
	 * @method static EO_AreaContent_Query query()
	 * @method static EO_AreaContent_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_AreaContent_Result getById($id)
	 * @method static EO_AreaContent_Result getList(array $parameters = [])
	 * @method static EO_AreaContent_Entity getEntity()
	 * @method static \Craft\Area\Entity\AreaContent createObject($setDefaultValues = true)
	 * @method static \Craft\Area\Entity\EO_AreaContent_Collection createCollection()
	 * @method static \Craft\Area\Entity\AreaContent wakeUpObject($row)
	 * @method static \Craft\Area\Entity\EO_AreaContent_Collection wakeUpCollection($rows)
	 */
	class AreaContentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AreaContent_Result exec()
	 * @method \Craft\Area\Entity\AreaContent fetchObject()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AreaContent_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Area\Entity\AreaContent fetchObject()
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection fetchCollection()
	 */
	class EO_AreaContent_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Area\Entity\AreaContent createObject($setDefaultValues = true)
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection createCollection()
	 * @method \Craft\Area\Entity\AreaContent wakeUpObject($row)
	 * @method \Craft\Area\Entity\EO_AreaContent_Collection wakeUpCollection($rows)
	 */
	class EO_AreaContent_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockTable */
namespace Bitrix\Iblock {
	/**
	 * Iblock
	 * @see \Bitrix\Iblock\IblockTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\Iblock setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\Iblock setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\Iblock resetTimestampX()
	 * @method \Bitrix\Iblock\Iblock unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock setIblockTypeId(\string|\Bitrix\Main\DB\SqlExpression $iblockTypeId)
	 * @method bool hasIblockTypeId()
	 * @method bool isIblockTypeIdFilled()
	 * @method bool isIblockTypeIdChanged()
	 * @method \string remindActualIblockTypeId()
	 * @method \string requireIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock resetIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock unsetIblockTypeId()
	 * @method \string fillIblockTypeId()
	 * @method \string getLid()
	 * @method \Bitrix\Iblock\Iblock setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Iblock\Iblock resetLid()
	 * @method \Bitrix\Iblock\Iblock unsetLid()
	 * @method \string fillLid()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\Iblock setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\Iblock resetCode()
	 * @method \Bitrix\Iblock\Iblock unsetCode()
	 * @method \string fillCode()
	 * @method \string getApiCode()
	 * @method \Bitrix\Iblock\Iblock setApiCode(\string|\Bitrix\Main\DB\SqlExpression $apiCode)
	 * @method bool hasApiCode()
	 * @method bool isApiCodeFilled()
	 * @method bool isApiCodeChanged()
	 * @method \string remindActualApiCode()
	 * @method \string requireApiCode()
	 * @method \Bitrix\Iblock\Iblock resetApiCode()
	 * @method \Bitrix\Iblock\Iblock unsetApiCode()
	 * @method \string fillApiCode()
	 * @method \boolean getRestOn()
	 * @method \Bitrix\Iblock\Iblock setRestOn(\boolean|\Bitrix\Main\DB\SqlExpression $restOn)
	 * @method bool hasRestOn()
	 * @method bool isRestOnFilled()
	 * @method bool isRestOnChanged()
	 * @method \boolean remindActualRestOn()
	 * @method \boolean requireRestOn()
	 * @method \Bitrix\Iblock\Iblock resetRestOn()
	 * @method \Bitrix\Iblock\Iblock unsetRestOn()
	 * @method \boolean fillRestOn()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\Iblock setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\Iblock resetName()
	 * @method \Bitrix\Iblock\Iblock unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\Iblock setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\Iblock resetActive()
	 * @method \Bitrix\Iblock\Iblock unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\Iblock setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\Iblock resetSort()
	 * @method \Bitrix\Iblock\Iblock unsetSort()
	 * @method \int fillSort()
	 * @method \string getListPageUrl()
	 * @method \Bitrix\Iblock\Iblock setListPageUrl(\string|\Bitrix\Main\DB\SqlExpression $listPageUrl)
	 * @method bool hasListPageUrl()
	 * @method bool isListPageUrlFilled()
	 * @method bool isListPageUrlChanged()
	 * @method \string remindActualListPageUrl()
	 * @method \string requireListPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetListPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetListPageUrl()
	 * @method \string fillListPageUrl()
	 * @method \string getDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock setDetailPageUrl(\string|\Bitrix\Main\DB\SqlExpression $detailPageUrl)
	 * @method bool hasDetailPageUrl()
	 * @method bool isDetailPageUrlFilled()
	 * @method bool isDetailPageUrlChanged()
	 * @method \string remindActualDetailPageUrl()
	 * @method \string requireDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetDetailPageUrl()
	 * @method \string fillDetailPageUrl()
	 * @method \string getSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock setSectionPageUrl(\string|\Bitrix\Main\DB\SqlExpression $sectionPageUrl)
	 * @method bool hasSectionPageUrl()
	 * @method bool isSectionPageUrlFilled()
	 * @method bool isSectionPageUrlChanged()
	 * @method \string remindActualSectionPageUrl()
	 * @method \string requireSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetSectionPageUrl()
	 * @method \string fillSectionPageUrl()
	 * @method \string getCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock setCanonicalPageUrl(\string|\Bitrix\Main\DB\SqlExpression $canonicalPageUrl)
	 * @method bool hasCanonicalPageUrl()
	 * @method bool isCanonicalPageUrlFilled()
	 * @method bool isCanonicalPageUrlChanged()
	 * @method \string remindActualCanonicalPageUrl()
	 * @method \string requireCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetCanonicalPageUrl()
	 * @method \string fillCanonicalPageUrl()
	 * @method \int getPicture()
	 * @method \Bitrix\Iblock\Iblock setPicture(\int|\Bitrix\Main\DB\SqlExpression $picture)
	 * @method bool hasPicture()
	 * @method bool isPictureFilled()
	 * @method bool isPictureChanged()
	 * @method \int remindActualPicture()
	 * @method \int requirePicture()
	 * @method \Bitrix\Iblock\Iblock resetPicture()
	 * @method \Bitrix\Iblock\Iblock unsetPicture()
	 * @method \int fillPicture()
	 * @method \string getDescription()
	 * @method \Bitrix\Iblock\Iblock setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Iblock\Iblock resetDescription()
	 * @method \Bitrix\Iblock\Iblock unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getDescriptionType()
	 * @method \Bitrix\Iblock\Iblock setDescriptionType(\string|\Bitrix\Main\DB\SqlExpression $descriptionType)
	 * @method bool hasDescriptionType()
	 * @method bool isDescriptionTypeFilled()
	 * @method bool isDescriptionTypeChanged()
	 * @method \string remindActualDescriptionType()
	 * @method \string requireDescriptionType()
	 * @method \Bitrix\Iblock\Iblock resetDescriptionType()
	 * @method \Bitrix\Iblock\Iblock unsetDescriptionType()
	 * @method \string fillDescriptionType()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\Iblock setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\Iblock resetXmlId()
	 * @method \Bitrix\Iblock\Iblock unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\Iblock setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\Iblock resetTmpId()
	 * @method \Bitrix\Iblock\Iblock unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \boolean getIndexElement()
	 * @method \Bitrix\Iblock\Iblock setIndexElement(\boolean|\Bitrix\Main\DB\SqlExpression $indexElement)
	 * @method bool hasIndexElement()
	 * @method bool isIndexElementFilled()
	 * @method bool isIndexElementChanged()
	 * @method \boolean remindActualIndexElement()
	 * @method \boolean requireIndexElement()
	 * @method \Bitrix\Iblock\Iblock resetIndexElement()
	 * @method \Bitrix\Iblock\Iblock unsetIndexElement()
	 * @method \boolean fillIndexElement()
	 * @method \boolean getIndexSection()
	 * @method \Bitrix\Iblock\Iblock setIndexSection(\boolean|\Bitrix\Main\DB\SqlExpression $indexSection)
	 * @method bool hasIndexSection()
	 * @method bool isIndexSectionFilled()
	 * @method bool isIndexSectionChanged()
	 * @method \boolean remindActualIndexSection()
	 * @method \boolean requireIndexSection()
	 * @method \Bitrix\Iblock\Iblock resetIndexSection()
	 * @method \Bitrix\Iblock\Iblock unsetIndexSection()
	 * @method \boolean fillIndexSection()
	 * @method \boolean getWorkflow()
	 * @method \Bitrix\Iblock\Iblock setWorkflow(\boolean|\Bitrix\Main\DB\SqlExpression $workflow)
	 * @method bool hasWorkflow()
	 * @method bool isWorkflowFilled()
	 * @method bool isWorkflowChanged()
	 * @method \boolean remindActualWorkflow()
	 * @method \boolean requireWorkflow()
	 * @method \Bitrix\Iblock\Iblock resetWorkflow()
	 * @method \Bitrix\Iblock\Iblock unsetWorkflow()
	 * @method \boolean fillWorkflow()
	 * @method \boolean getBizproc()
	 * @method \Bitrix\Iblock\Iblock setBizproc(\boolean|\Bitrix\Main\DB\SqlExpression $bizproc)
	 * @method bool hasBizproc()
	 * @method bool isBizprocFilled()
	 * @method bool isBizprocChanged()
	 * @method \boolean remindActualBizproc()
	 * @method \boolean requireBizproc()
	 * @method \Bitrix\Iblock\Iblock resetBizproc()
	 * @method \Bitrix\Iblock\Iblock unsetBizproc()
	 * @method \boolean fillBizproc()
	 * @method \string getSectionChooser()
	 * @method \Bitrix\Iblock\Iblock setSectionChooser(\string|\Bitrix\Main\DB\SqlExpression $sectionChooser)
	 * @method bool hasSectionChooser()
	 * @method bool isSectionChooserFilled()
	 * @method bool isSectionChooserChanged()
	 * @method \string remindActualSectionChooser()
	 * @method \string requireSectionChooser()
	 * @method \Bitrix\Iblock\Iblock resetSectionChooser()
	 * @method \Bitrix\Iblock\Iblock unsetSectionChooser()
	 * @method \string fillSectionChooser()
	 * @method \string getListMode()
	 * @method \Bitrix\Iblock\Iblock setListMode(\string|\Bitrix\Main\DB\SqlExpression $listMode)
	 * @method bool hasListMode()
	 * @method bool isListModeFilled()
	 * @method bool isListModeChanged()
	 * @method \string remindActualListMode()
	 * @method \string requireListMode()
	 * @method \Bitrix\Iblock\Iblock resetListMode()
	 * @method \Bitrix\Iblock\Iblock unsetListMode()
	 * @method \string fillListMode()
	 * @method \string getRightsMode()
	 * @method \Bitrix\Iblock\Iblock setRightsMode(\string|\Bitrix\Main\DB\SqlExpression $rightsMode)
	 * @method bool hasRightsMode()
	 * @method bool isRightsModeFilled()
	 * @method bool isRightsModeChanged()
	 * @method \string remindActualRightsMode()
	 * @method \string requireRightsMode()
	 * @method \Bitrix\Iblock\Iblock resetRightsMode()
	 * @method \Bitrix\Iblock\Iblock unsetRightsMode()
	 * @method \string fillRightsMode()
	 * @method \boolean getSectionProperty()
	 * @method \Bitrix\Iblock\Iblock setSectionProperty(\boolean|\Bitrix\Main\DB\SqlExpression $sectionProperty)
	 * @method bool hasSectionProperty()
	 * @method bool isSectionPropertyFilled()
	 * @method bool isSectionPropertyChanged()
	 * @method \boolean remindActualSectionProperty()
	 * @method \boolean requireSectionProperty()
	 * @method \Bitrix\Iblock\Iblock resetSectionProperty()
	 * @method \Bitrix\Iblock\Iblock unsetSectionProperty()
	 * @method \boolean fillSectionProperty()
	 * @method \string getPropertyIndex()
	 * @method \Bitrix\Iblock\Iblock setPropertyIndex(\string|\Bitrix\Main\DB\SqlExpression $propertyIndex)
	 * @method bool hasPropertyIndex()
	 * @method bool isPropertyIndexFilled()
	 * @method bool isPropertyIndexChanged()
	 * @method \string remindActualPropertyIndex()
	 * @method \string requirePropertyIndex()
	 * @method \Bitrix\Iblock\Iblock resetPropertyIndex()
	 * @method \Bitrix\Iblock\Iblock unsetPropertyIndex()
	 * @method \string fillPropertyIndex()
	 * @method \string getVersion()
	 * @method \Bitrix\Iblock\Iblock setVersion(\string|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \string remindActualVersion()
	 * @method \string requireVersion()
	 * @method \Bitrix\Iblock\Iblock resetVersion()
	 * @method \Bitrix\Iblock\Iblock unsetVersion()
	 * @method \string fillVersion()
	 * @method \int getLastConvElement()
	 * @method \Bitrix\Iblock\Iblock setLastConvElement(\int|\Bitrix\Main\DB\SqlExpression $lastConvElement)
	 * @method bool hasLastConvElement()
	 * @method bool isLastConvElementFilled()
	 * @method bool isLastConvElementChanged()
	 * @method \int remindActualLastConvElement()
	 * @method \int requireLastConvElement()
	 * @method \Bitrix\Iblock\Iblock resetLastConvElement()
	 * @method \Bitrix\Iblock\Iblock unsetLastConvElement()
	 * @method \int fillLastConvElement()
	 * @method \int getSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock setSocnetGroupId(\int|\Bitrix\Main\DB\SqlExpression $socnetGroupId)
	 * @method bool hasSocnetGroupId()
	 * @method bool isSocnetGroupIdFilled()
	 * @method bool isSocnetGroupIdChanged()
	 * @method \int remindActualSocnetGroupId()
	 * @method \int requireSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock resetSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock unsetSocnetGroupId()
	 * @method \int fillSocnetGroupId()
	 * @method \string getEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock setEditFileBefore(\string|\Bitrix\Main\DB\SqlExpression $editFileBefore)
	 * @method bool hasEditFileBefore()
	 * @method bool isEditFileBeforeFilled()
	 * @method bool isEditFileBeforeChanged()
	 * @method \string remindActualEditFileBefore()
	 * @method \string requireEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock resetEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock unsetEditFileBefore()
	 * @method \string fillEditFileBefore()
	 * @method \string getEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock setEditFileAfter(\string|\Bitrix\Main\DB\SqlExpression $editFileAfter)
	 * @method bool hasEditFileAfter()
	 * @method bool isEditFileAfterFilled()
	 * @method bool isEditFileAfterChanged()
	 * @method \string remindActualEditFileAfter()
	 * @method \string requireEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock resetEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock unsetEditFileAfter()
	 * @method \string fillEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type getType()
	 * @method \Bitrix\Iblock\EO_Type remindActualType()
	 * @method \Bitrix\Iblock\EO_Type requireType()
	 * @method \Bitrix\Iblock\Iblock setType(\Bitrix\Iblock\EO_Type $object)
	 * @method \Bitrix\Iblock\Iblock resetType()
	 * @method \Bitrix\Iblock\Iblock unsetType()
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \Bitrix\Iblock\EO_Type fillType()
	 * @method \Bitrix\Iblock\EO_Property_Collection getProperties()
	 * @method \Bitrix\Iblock\EO_Property_Collection requireProperties()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperties()
	 * @method bool hasProperties()
	 * @method bool isPropertiesFilled()
	 * @method bool isPropertiesChanged()
	 * @method void addToProperties(\Bitrix\Iblock\Property $property)
	 * @method void removeFromProperties(\Bitrix\Iblock\Property $property)
	 * @method void removeAllProperties()
	 * @method \Bitrix\Iblock\Iblock resetProperties()
	 * @method \Bitrix\Iblock\Iblock unsetProperties()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\Iblock set($fieldName, $value)
	 * @method \Bitrix\Iblock\Iblock reset($fieldName)
	 * @method \Bitrix\Iblock\Iblock unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\Iblock wakeUp($data)
	 */
	class EO_Iblock {
		/* @var \Bitrix\Iblock\IblockTable */
		static public $dataClass = '\Bitrix\Iblock\IblockTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Iblock_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getIblockTypeIdList()
	 * @method \string[] fillIblockTypeId()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getApiCodeList()
	 * @method \string[] fillApiCode()
	 * @method \boolean[] getRestOnList()
	 * @method \boolean[] fillRestOn()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getListPageUrlList()
	 * @method \string[] fillListPageUrl()
	 * @method \string[] getDetailPageUrlList()
	 * @method \string[] fillDetailPageUrl()
	 * @method \string[] getSectionPageUrlList()
	 * @method \string[] fillSectionPageUrl()
	 * @method \string[] getCanonicalPageUrlList()
	 * @method \string[] fillCanonicalPageUrl()
	 * @method \int[] getPictureList()
	 * @method \int[] fillPicture()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getDescriptionTypeList()
	 * @method \string[] fillDescriptionType()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \boolean[] getIndexElementList()
	 * @method \boolean[] fillIndexElement()
	 * @method \boolean[] getIndexSectionList()
	 * @method \boolean[] fillIndexSection()
	 * @method \boolean[] getWorkflowList()
	 * @method \boolean[] fillWorkflow()
	 * @method \boolean[] getBizprocList()
	 * @method \boolean[] fillBizproc()
	 * @method \string[] getSectionChooserList()
	 * @method \string[] fillSectionChooser()
	 * @method \string[] getListModeList()
	 * @method \string[] fillListMode()
	 * @method \string[] getRightsModeList()
	 * @method \string[] fillRightsMode()
	 * @method \boolean[] getSectionPropertyList()
	 * @method \boolean[] fillSectionProperty()
	 * @method \string[] getPropertyIndexList()
	 * @method \string[] fillPropertyIndex()
	 * @method \string[] getVersionList()
	 * @method \string[] fillVersion()
	 * @method \int[] getLastConvElementList()
	 * @method \int[] fillLastConvElement()
	 * @method \int[] getSocnetGroupIdList()
	 * @method \int[] fillSocnetGroupId()
	 * @method \string[] getEditFileBeforeList()
	 * @method \string[] fillEditFileBefore()
	 * @method \string[] getEditFileAfterList()
	 * @method \string[] fillEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type[] getTypeList()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection getTypeCollection()
	 * @method \Bitrix\Iblock\EO_Type_Collection fillType()
	 * @method \Bitrix\Iblock\EO_Property_Collection[] getPropertiesList()
	 * @method \Bitrix\Iblock\EO_Property_Collection getPropertiesCollection()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperties()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\Iblock $object)
	 * @method bool has(\Bitrix\Iblock\Iblock $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\Iblock getByPrimary($primary)
	 * @method \Bitrix\Iblock\Iblock[] getAll()
	 * @method bool remove(\Bitrix\Iblock\Iblock $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\Iblock current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Bitrix\Iblock\EO_Iblock_Collection merge(?\Bitrix\Iblock\EO_Iblock_Collection $collection)
	 * @method bool isEmpty()
	 */
	class EO_Iblock_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockTable */
		static public $dataClass = '\Bitrix\Iblock\IblockTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Iblock_Query query()
	 * @method static EO_Iblock_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_Iblock_Result getById($id)
	 * @method static EO_Iblock_Result getList(array $parameters = [])
	 * @method static EO_Iblock_Entity getEntity()
	 * @method static \Bitrix\Iblock\Iblock createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection createCollection()
	 * @method static \Bitrix\Iblock\Iblock wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection wakeUpCollection($rows)
	 */
	class IblockTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Iblock_Result exec()
	 * @method \Bitrix\Iblock\Iblock fetchObject()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Iblock_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\Iblock fetchObject()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fetchCollection()
	 */
	class EO_Iblock_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\Iblock createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Iblock_Collection createCollection()
	 * @method \Bitrix\Iblock\Iblock wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Iblock_Collection wakeUpCollection($rows)
	 */
	class EO_Iblock_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Jedi\User\Entity\JUserTable */
namespace Jedi\User\Entity {
	/**
	 * JUser
	 * @see \Jedi\User\Entity\JUserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Jedi\User\Entity\JUser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLogin()
	 * @method \Jedi\User\Entity\JUser setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Jedi\User\Entity\JUser resetLogin()
	 * @method \Jedi\User\Entity\JUser unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Jedi\User\Entity\JUser setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Jedi\User\Entity\JUser resetPassword()
	 * @method \Jedi\User\Entity\JUser unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getEmail()
	 * @method \Jedi\User\Entity\JUser setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Jedi\User\Entity\JUser resetEmail()
	 * @method \Jedi\User\Entity\JUser unsetEmail()
	 * @method \string fillEmail()
	 * @method \boolean getActive()
	 * @method \Jedi\User\Entity\JUser setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Jedi\User\Entity\JUser resetActive()
	 * @method \Jedi\User\Entity\JUser unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getBlocked()
	 * @method \Jedi\User\Entity\JUser setBlocked(\boolean|\Bitrix\Main\DB\SqlExpression $blocked)
	 * @method bool hasBlocked()
	 * @method bool isBlockedFilled()
	 * @method bool isBlockedChanged()
	 * @method \boolean remindActualBlocked()
	 * @method \boolean requireBlocked()
	 * @method \Jedi\User\Entity\JUser resetBlocked()
	 * @method \Jedi\User\Entity\JUser unsetBlocked()
	 * @method \boolean fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime getDateRegister()
	 * @method \Jedi\User\Entity\JUser setDateRegister(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRegister)
	 * @method bool hasDateRegister()
	 * @method bool isDateRegisterFilled()
	 * @method bool isDateRegisterChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegister()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegister()
	 * @method \Jedi\User\Entity\JUser resetDateRegister()
	 * @method \Jedi\User\Entity\JUser unsetDateRegister()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime getDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegShort()
	 * @method bool hasDateRegShort()
	 * @method bool isDateRegShortFilled()
	 * @method \Jedi\User\Entity\JUser unsetDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime getLastLogin()
	 * @method \Jedi\User\Entity\JUser setLastLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastLogin)
	 * @method bool hasLastLogin()
	 * @method bool isLastLoginFilled()
	 * @method bool isLastLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLogin()
	 * @method \Bitrix\Main\Type\DateTime requireLastLogin()
	 * @method \Jedi\User\Entity\JUser resetLastLogin()
	 * @method \Jedi\User\Entity\JUser unsetLastLogin()
	 * @method \Bitrix\Main\Type\DateTime fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime getLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastLoginShort()
	 * @method bool hasLastLoginShort()
	 * @method bool isLastLoginShortFilled()
	 * @method \Jedi\User\Entity\JUser unsetLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime getLastActivityDate()
	 * @method \Jedi\User\Entity\JUser setLastActivityDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastActivityDate)
	 * @method bool hasLastActivityDate()
	 * @method bool isLastActivityDateFilled()
	 * @method bool isLastActivityDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastActivityDate()
	 * @method \Jedi\User\Entity\JUser resetLastActivityDate()
	 * @method \Jedi\User\Entity\JUser unsetLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Jedi\User\Entity\JUser setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Jedi\User\Entity\JUser resetTimestampX()
	 * @method \Jedi\User\Entity\JUser unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getName()
	 * @method \Jedi\User\Entity\JUser setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Jedi\User\Entity\JUser resetName()
	 * @method \Jedi\User\Entity\JUser unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Jedi\User\Entity\JUser setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Jedi\User\Entity\JUser resetSecondName()
	 * @method \Jedi\User\Entity\JUser unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Jedi\User\Entity\JUser setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Jedi\User\Entity\JUser resetLastName()
	 * @method \Jedi\User\Entity\JUser unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getTitle()
	 * @method \Jedi\User\Entity\JUser setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Jedi\User\Entity\JUser resetTitle()
	 * @method \Jedi\User\Entity\JUser unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getExternalAuthId()
	 * @method \Jedi\User\Entity\JUser setExternalAuthId(\string|\Bitrix\Main\DB\SqlExpression $externalAuthId)
	 * @method bool hasExternalAuthId()
	 * @method bool isExternalAuthIdFilled()
	 * @method bool isExternalAuthIdChanged()
	 * @method \string remindActualExternalAuthId()
	 * @method \string requireExternalAuthId()
	 * @method \Jedi\User\Entity\JUser resetExternalAuthId()
	 * @method \Jedi\User\Entity\JUser unsetExternalAuthId()
	 * @method \string fillExternalAuthId()
	 * @method \string getXmlId()
	 * @method \Jedi\User\Entity\JUser setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Jedi\User\Entity\JUser resetXmlId()
	 * @method \Jedi\User\Entity\JUser unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getBxUserId()
	 * @method \Jedi\User\Entity\JUser setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Jedi\User\Entity\JUser resetBxUserId()
	 * @method \Jedi\User\Entity\JUser unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getConfirmCode()
	 * @method \Jedi\User\Entity\JUser setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Jedi\User\Entity\JUser resetConfirmCode()
	 * @method \Jedi\User\Entity\JUser unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \string getLid()
	 * @method \Jedi\User\Entity\JUser setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Jedi\User\Entity\JUser resetLid()
	 * @method \Jedi\User\Entity\JUser unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \Jedi\User\Entity\JUser setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Jedi\User\Entity\JUser resetLanguageId()
	 * @method \Jedi\User\Entity\JUser unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getTimeZone()
	 * @method \Jedi\User\Entity\JUser setTimeZone(\string|\Bitrix\Main\DB\SqlExpression $timeZone)
	 * @method bool hasTimeZone()
	 * @method bool isTimeZoneFilled()
	 * @method bool isTimeZoneChanged()
	 * @method \string remindActualTimeZone()
	 * @method \string requireTimeZone()
	 * @method \Jedi\User\Entity\JUser resetTimeZone()
	 * @method \Jedi\User\Entity\JUser unsetTimeZone()
	 * @method \string fillTimeZone()
	 * @method \int getTimeZoneOffset()
	 * @method \Jedi\User\Entity\JUser setTimeZoneOffset(\int|\Bitrix\Main\DB\SqlExpression $timeZoneOffset)
	 * @method bool hasTimeZoneOffset()
	 * @method bool isTimeZoneOffsetFilled()
	 * @method bool isTimeZoneOffsetChanged()
	 * @method \int remindActualTimeZoneOffset()
	 * @method \int requireTimeZoneOffset()
	 * @method \Jedi\User\Entity\JUser resetTimeZoneOffset()
	 * @method \Jedi\User\Entity\JUser unsetTimeZoneOffset()
	 * @method \int fillTimeZoneOffset()
	 * @method \string getPersonalProfession()
	 * @method \Jedi\User\Entity\JUser setPersonalProfession(\string|\Bitrix\Main\DB\SqlExpression $personalProfession)
	 * @method bool hasPersonalProfession()
	 * @method bool isPersonalProfessionFilled()
	 * @method bool isPersonalProfessionChanged()
	 * @method \string remindActualPersonalProfession()
	 * @method \string requirePersonalProfession()
	 * @method \Jedi\User\Entity\JUser resetPersonalProfession()
	 * @method \Jedi\User\Entity\JUser unsetPersonalProfession()
	 * @method \string fillPersonalProfession()
	 * @method \string getPersonalPhone()
	 * @method \Jedi\User\Entity\JUser setPersonalPhone(\string|\Bitrix\Main\DB\SqlExpression $personalPhone)
	 * @method bool hasPersonalPhone()
	 * @method bool isPersonalPhoneFilled()
	 * @method bool isPersonalPhoneChanged()
	 * @method \string remindActualPersonalPhone()
	 * @method \string requirePersonalPhone()
	 * @method \Jedi\User\Entity\JUser resetPersonalPhone()
	 * @method \Jedi\User\Entity\JUser unsetPersonalPhone()
	 * @method \string fillPersonalPhone()
	 * @method \string getPersonalMobile()
	 * @method \Jedi\User\Entity\JUser setPersonalMobile(\string|\Bitrix\Main\DB\SqlExpression $personalMobile)
	 * @method bool hasPersonalMobile()
	 * @method bool isPersonalMobileFilled()
	 * @method bool isPersonalMobileChanged()
	 * @method \string remindActualPersonalMobile()
	 * @method \string requirePersonalMobile()
	 * @method \Jedi\User\Entity\JUser resetPersonalMobile()
	 * @method \Jedi\User\Entity\JUser unsetPersonalMobile()
	 * @method \string fillPersonalMobile()
	 * @method \string getPersonalWww()
	 * @method \Jedi\User\Entity\JUser setPersonalWww(\string|\Bitrix\Main\DB\SqlExpression $personalWww)
	 * @method bool hasPersonalWww()
	 * @method bool isPersonalWwwFilled()
	 * @method bool isPersonalWwwChanged()
	 * @method \string remindActualPersonalWww()
	 * @method \string requirePersonalWww()
	 * @method \Jedi\User\Entity\JUser resetPersonalWww()
	 * @method \Jedi\User\Entity\JUser unsetPersonalWww()
	 * @method \string fillPersonalWww()
	 * @method \string getPersonalIcq()
	 * @method \Jedi\User\Entity\JUser setPersonalIcq(\string|\Bitrix\Main\DB\SqlExpression $personalIcq)
	 * @method bool hasPersonalIcq()
	 * @method bool isPersonalIcqFilled()
	 * @method bool isPersonalIcqChanged()
	 * @method \string remindActualPersonalIcq()
	 * @method \string requirePersonalIcq()
	 * @method \Jedi\User\Entity\JUser resetPersonalIcq()
	 * @method \Jedi\User\Entity\JUser unsetPersonalIcq()
	 * @method \string fillPersonalIcq()
	 * @method \string getPersonalFax()
	 * @method \Jedi\User\Entity\JUser setPersonalFax(\string|\Bitrix\Main\DB\SqlExpression $personalFax)
	 * @method bool hasPersonalFax()
	 * @method bool isPersonalFaxFilled()
	 * @method bool isPersonalFaxChanged()
	 * @method \string remindActualPersonalFax()
	 * @method \string requirePersonalFax()
	 * @method \Jedi\User\Entity\JUser resetPersonalFax()
	 * @method \Jedi\User\Entity\JUser unsetPersonalFax()
	 * @method \string fillPersonalFax()
	 * @method \string getPersonalPager()
	 * @method \Jedi\User\Entity\JUser setPersonalPager(\string|\Bitrix\Main\DB\SqlExpression $personalPager)
	 * @method bool hasPersonalPager()
	 * @method bool isPersonalPagerFilled()
	 * @method bool isPersonalPagerChanged()
	 * @method \string remindActualPersonalPager()
	 * @method \string requirePersonalPager()
	 * @method \Jedi\User\Entity\JUser resetPersonalPager()
	 * @method \Jedi\User\Entity\JUser unsetPersonalPager()
	 * @method \string fillPersonalPager()
	 * @method \string getPersonalStreet()
	 * @method \Jedi\User\Entity\JUser setPersonalStreet(\string|\Bitrix\Main\DB\SqlExpression $personalStreet)
	 * @method bool hasPersonalStreet()
	 * @method bool isPersonalStreetFilled()
	 * @method bool isPersonalStreetChanged()
	 * @method \string remindActualPersonalStreet()
	 * @method \string requirePersonalStreet()
	 * @method \Jedi\User\Entity\JUser resetPersonalStreet()
	 * @method \Jedi\User\Entity\JUser unsetPersonalStreet()
	 * @method \string fillPersonalStreet()
	 * @method \string getPersonalMailbox()
	 * @method \Jedi\User\Entity\JUser setPersonalMailbox(\string|\Bitrix\Main\DB\SqlExpression $personalMailbox)
	 * @method bool hasPersonalMailbox()
	 * @method bool isPersonalMailboxFilled()
	 * @method bool isPersonalMailboxChanged()
	 * @method \string remindActualPersonalMailbox()
	 * @method \string requirePersonalMailbox()
	 * @method \Jedi\User\Entity\JUser resetPersonalMailbox()
	 * @method \Jedi\User\Entity\JUser unsetPersonalMailbox()
	 * @method \string fillPersonalMailbox()
	 * @method \string getPersonalCity()
	 * @method \Jedi\User\Entity\JUser setPersonalCity(\string|\Bitrix\Main\DB\SqlExpression $personalCity)
	 * @method bool hasPersonalCity()
	 * @method bool isPersonalCityFilled()
	 * @method bool isPersonalCityChanged()
	 * @method \string remindActualPersonalCity()
	 * @method \string requirePersonalCity()
	 * @method \Jedi\User\Entity\JUser resetPersonalCity()
	 * @method \Jedi\User\Entity\JUser unsetPersonalCity()
	 * @method \string fillPersonalCity()
	 * @method \string getPersonalState()
	 * @method \Jedi\User\Entity\JUser setPersonalState(\string|\Bitrix\Main\DB\SqlExpression $personalState)
	 * @method bool hasPersonalState()
	 * @method bool isPersonalStateFilled()
	 * @method bool isPersonalStateChanged()
	 * @method \string remindActualPersonalState()
	 * @method \string requirePersonalState()
	 * @method \Jedi\User\Entity\JUser resetPersonalState()
	 * @method \Jedi\User\Entity\JUser unsetPersonalState()
	 * @method \string fillPersonalState()
	 * @method \string getPersonalZip()
	 * @method \Jedi\User\Entity\JUser setPersonalZip(\string|\Bitrix\Main\DB\SqlExpression $personalZip)
	 * @method bool hasPersonalZip()
	 * @method bool isPersonalZipFilled()
	 * @method bool isPersonalZipChanged()
	 * @method \string remindActualPersonalZip()
	 * @method \string requirePersonalZip()
	 * @method \Jedi\User\Entity\JUser resetPersonalZip()
	 * @method \Jedi\User\Entity\JUser unsetPersonalZip()
	 * @method \string fillPersonalZip()
	 * @method \string getPersonalCountry()
	 * @method \Jedi\User\Entity\JUser setPersonalCountry(\string|\Bitrix\Main\DB\SqlExpression $personalCountry)
	 * @method bool hasPersonalCountry()
	 * @method bool isPersonalCountryFilled()
	 * @method bool isPersonalCountryChanged()
	 * @method \string remindActualPersonalCountry()
	 * @method \string requirePersonalCountry()
	 * @method \Jedi\User\Entity\JUser resetPersonalCountry()
	 * @method \Jedi\User\Entity\JUser unsetPersonalCountry()
	 * @method \string fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date getPersonalBirthday()
	 * @method \Jedi\User\Entity\JUser setPersonalBirthday(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $personalBirthday)
	 * @method bool hasPersonalBirthday()
	 * @method bool isPersonalBirthdayFilled()
	 * @method bool isPersonalBirthdayChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date requirePersonalBirthday()
	 * @method \Jedi\User\Entity\JUser resetPersonalBirthday()
	 * @method \Jedi\User\Entity\JUser unsetPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date fillPersonalBirthday()
	 * @method \string getPersonalGender()
	 * @method \Jedi\User\Entity\JUser setPersonalGender(\string|\Bitrix\Main\DB\SqlExpression $personalGender)
	 * @method bool hasPersonalGender()
	 * @method bool isPersonalGenderFilled()
	 * @method bool isPersonalGenderChanged()
	 * @method \string remindActualPersonalGender()
	 * @method \string requirePersonalGender()
	 * @method \Jedi\User\Entity\JUser resetPersonalGender()
	 * @method \Jedi\User\Entity\JUser unsetPersonalGender()
	 * @method \string fillPersonalGender()
	 * @method \int getPersonalPhoto()
	 * @method \Jedi\User\Entity\JUser setPersonalPhoto(\int|\Bitrix\Main\DB\SqlExpression $personalPhoto)
	 * @method bool hasPersonalPhoto()
	 * @method bool isPersonalPhotoFilled()
	 * @method bool isPersonalPhotoChanged()
	 * @method \int remindActualPersonalPhoto()
	 * @method \int requirePersonalPhoto()
	 * @method \Jedi\User\Entity\JUser resetPersonalPhoto()
	 * @method \Jedi\User\Entity\JUser unsetPersonalPhoto()
	 * @method \int fillPersonalPhoto()
	 * @method \string getPersonalNotes()
	 * @method \Jedi\User\Entity\JUser setPersonalNotes(\string|\Bitrix\Main\DB\SqlExpression $personalNotes)
	 * @method bool hasPersonalNotes()
	 * @method bool isPersonalNotesFilled()
	 * @method bool isPersonalNotesChanged()
	 * @method \string remindActualPersonalNotes()
	 * @method \string requirePersonalNotes()
	 * @method \Jedi\User\Entity\JUser resetPersonalNotes()
	 * @method \Jedi\User\Entity\JUser unsetPersonalNotes()
	 * @method \string fillPersonalNotes()
	 * @method \string getWorkCompany()
	 * @method \Jedi\User\Entity\JUser setWorkCompany(\string|\Bitrix\Main\DB\SqlExpression $workCompany)
	 * @method bool hasWorkCompany()
	 * @method bool isWorkCompanyFilled()
	 * @method bool isWorkCompanyChanged()
	 * @method \string remindActualWorkCompany()
	 * @method \string requireWorkCompany()
	 * @method \Jedi\User\Entity\JUser resetWorkCompany()
	 * @method \Jedi\User\Entity\JUser unsetWorkCompany()
	 * @method \string fillWorkCompany()
	 * @method \string getWorkDepartment()
	 * @method \Jedi\User\Entity\JUser setWorkDepartment(\string|\Bitrix\Main\DB\SqlExpression $workDepartment)
	 * @method bool hasWorkDepartment()
	 * @method bool isWorkDepartmentFilled()
	 * @method bool isWorkDepartmentChanged()
	 * @method \string remindActualWorkDepartment()
	 * @method \string requireWorkDepartment()
	 * @method \Jedi\User\Entity\JUser resetWorkDepartment()
	 * @method \Jedi\User\Entity\JUser unsetWorkDepartment()
	 * @method \string fillWorkDepartment()
	 * @method \string getWorkPhone()
	 * @method \Jedi\User\Entity\JUser setWorkPhone(\string|\Bitrix\Main\DB\SqlExpression $workPhone)
	 * @method bool hasWorkPhone()
	 * @method bool isWorkPhoneFilled()
	 * @method bool isWorkPhoneChanged()
	 * @method \string remindActualWorkPhone()
	 * @method \string requireWorkPhone()
	 * @method \Jedi\User\Entity\JUser resetWorkPhone()
	 * @method \Jedi\User\Entity\JUser unsetWorkPhone()
	 * @method \string fillWorkPhone()
	 * @method \string getWorkPosition()
	 * @method \Jedi\User\Entity\JUser setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Jedi\User\Entity\JUser resetWorkPosition()
	 * @method \Jedi\User\Entity\JUser unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getWorkWww()
	 * @method \Jedi\User\Entity\JUser setWorkWww(\string|\Bitrix\Main\DB\SqlExpression $workWww)
	 * @method bool hasWorkWww()
	 * @method bool isWorkWwwFilled()
	 * @method bool isWorkWwwChanged()
	 * @method \string remindActualWorkWww()
	 * @method \string requireWorkWww()
	 * @method \Jedi\User\Entity\JUser resetWorkWww()
	 * @method \Jedi\User\Entity\JUser unsetWorkWww()
	 * @method \string fillWorkWww()
	 * @method \string getWorkFax()
	 * @method \Jedi\User\Entity\JUser setWorkFax(\string|\Bitrix\Main\DB\SqlExpression $workFax)
	 * @method bool hasWorkFax()
	 * @method bool isWorkFaxFilled()
	 * @method bool isWorkFaxChanged()
	 * @method \string remindActualWorkFax()
	 * @method \string requireWorkFax()
	 * @method \Jedi\User\Entity\JUser resetWorkFax()
	 * @method \Jedi\User\Entity\JUser unsetWorkFax()
	 * @method \string fillWorkFax()
	 * @method \string getWorkPager()
	 * @method \Jedi\User\Entity\JUser setWorkPager(\string|\Bitrix\Main\DB\SqlExpression $workPager)
	 * @method bool hasWorkPager()
	 * @method bool isWorkPagerFilled()
	 * @method bool isWorkPagerChanged()
	 * @method \string remindActualWorkPager()
	 * @method \string requireWorkPager()
	 * @method \Jedi\User\Entity\JUser resetWorkPager()
	 * @method \Jedi\User\Entity\JUser unsetWorkPager()
	 * @method \string fillWorkPager()
	 * @method \string getWorkStreet()
	 * @method \Jedi\User\Entity\JUser setWorkStreet(\string|\Bitrix\Main\DB\SqlExpression $workStreet)
	 * @method bool hasWorkStreet()
	 * @method bool isWorkStreetFilled()
	 * @method bool isWorkStreetChanged()
	 * @method \string remindActualWorkStreet()
	 * @method \string requireWorkStreet()
	 * @method \Jedi\User\Entity\JUser resetWorkStreet()
	 * @method \Jedi\User\Entity\JUser unsetWorkStreet()
	 * @method \string fillWorkStreet()
	 * @method \string getWorkMailbox()
	 * @method \Jedi\User\Entity\JUser setWorkMailbox(\string|\Bitrix\Main\DB\SqlExpression $workMailbox)
	 * @method bool hasWorkMailbox()
	 * @method bool isWorkMailboxFilled()
	 * @method bool isWorkMailboxChanged()
	 * @method \string remindActualWorkMailbox()
	 * @method \string requireWorkMailbox()
	 * @method \Jedi\User\Entity\JUser resetWorkMailbox()
	 * @method \Jedi\User\Entity\JUser unsetWorkMailbox()
	 * @method \string fillWorkMailbox()
	 * @method \string getWorkCity()
	 * @method \Jedi\User\Entity\JUser setWorkCity(\string|\Bitrix\Main\DB\SqlExpression $workCity)
	 * @method bool hasWorkCity()
	 * @method bool isWorkCityFilled()
	 * @method bool isWorkCityChanged()
	 * @method \string remindActualWorkCity()
	 * @method \string requireWorkCity()
	 * @method \Jedi\User\Entity\JUser resetWorkCity()
	 * @method \Jedi\User\Entity\JUser unsetWorkCity()
	 * @method \string fillWorkCity()
	 * @method \string getWorkState()
	 * @method \Jedi\User\Entity\JUser setWorkState(\string|\Bitrix\Main\DB\SqlExpression $workState)
	 * @method bool hasWorkState()
	 * @method bool isWorkStateFilled()
	 * @method bool isWorkStateChanged()
	 * @method \string remindActualWorkState()
	 * @method \string requireWorkState()
	 * @method \Jedi\User\Entity\JUser resetWorkState()
	 * @method \Jedi\User\Entity\JUser unsetWorkState()
	 * @method \string fillWorkState()
	 * @method \string getWorkZip()
	 * @method \Jedi\User\Entity\JUser setWorkZip(\string|\Bitrix\Main\DB\SqlExpression $workZip)
	 * @method bool hasWorkZip()
	 * @method bool isWorkZipFilled()
	 * @method bool isWorkZipChanged()
	 * @method \string remindActualWorkZip()
	 * @method \string requireWorkZip()
	 * @method \Jedi\User\Entity\JUser resetWorkZip()
	 * @method \Jedi\User\Entity\JUser unsetWorkZip()
	 * @method \string fillWorkZip()
	 * @method \string getWorkCountry()
	 * @method \Jedi\User\Entity\JUser setWorkCountry(\string|\Bitrix\Main\DB\SqlExpression $workCountry)
	 * @method bool hasWorkCountry()
	 * @method bool isWorkCountryFilled()
	 * @method bool isWorkCountryChanged()
	 * @method \string remindActualWorkCountry()
	 * @method \string requireWorkCountry()
	 * @method \Jedi\User\Entity\JUser resetWorkCountry()
	 * @method \Jedi\User\Entity\JUser unsetWorkCountry()
	 * @method \string fillWorkCountry()
	 * @method \string getWorkProfile()
	 * @method \Jedi\User\Entity\JUser setWorkProfile(\string|\Bitrix\Main\DB\SqlExpression $workProfile)
	 * @method bool hasWorkProfile()
	 * @method bool isWorkProfileFilled()
	 * @method bool isWorkProfileChanged()
	 * @method \string remindActualWorkProfile()
	 * @method \string requireWorkProfile()
	 * @method \Jedi\User\Entity\JUser resetWorkProfile()
	 * @method \Jedi\User\Entity\JUser unsetWorkProfile()
	 * @method \string fillWorkProfile()
	 * @method \int getWorkLogo()
	 * @method \Jedi\User\Entity\JUser setWorkLogo(\int|\Bitrix\Main\DB\SqlExpression $workLogo)
	 * @method bool hasWorkLogo()
	 * @method bool isWorkLogoFilled()
	 * @method bool isWorkLogoChanged()
	 * @method \int remindActualWorkLogo()
	 * @method \int requireWorkLogo()
	 * @method \Jedi\User\Entity\JUser resetWorkLogo()
	 * @method \Jedi\User\Entity\JUser unsetWorkLogo()
	 * @method \int fillWorkLogo()
	 * @method \string getWorkNotes()
	 * @method \Jedi\User\Entity\JUser setWorkNotes(\string|\Bitrix\Main\DB\SqlExpression $workNotes)
	 * @method bool hasWorkNotes()
	 * @method bool isWorkNotesFilled()
	 * @method bool isWorkNotesChanged()
	 * @method \string remindActualWorkNotes()
	 * @method \string requireWorkNotes()
	 * @method \Jedi\User\Entity\JUser resetWorkNotes()
	 * @method \Jedi\User\Entity\JUser unsetWorkNotes()
	 * @method \string fillWorkNotes()
	 * @method \string getAdminNotes()
	 * @method \Jedi\User\Entity\JUser setAdminNotes(\string|\Bitrix\Main\DB\SqlExpression $adminNotes)
	 * @method bool hasAdminNotes()
	 * @method bool isAdminNotesFilled()
	 * @method bool isAdminNotesChanged()
	 * @method \string remindActualAdminNotes()
	 * @method \string requireAdminNotes()
	 * @method \Jedi\User\Entity\JUser resetAdminNotes()
	 * @method \Jedi\User\Entity\JUser unsetAdminNotes()
	 * @method \string fillAdminNotes()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Jedi\User\Entity\JUser unsetShortName()
	 * @method \string fillShortName()
	 * @method \boolean getIsOnline()
	 * @method \boolean remindActualIsOnline()
	 * @method \boolean requireIsOnline()
	 * @method bool hasIsOnline()
	 * @method bool isIsOnlineFilled()
	 * @method \Jedi\User\Entity\JUser unsetIsOnline()
	 * @method \boolean fillIsOnline()
	 * @method \boolean getIsRealUser()
	 * @method \boolean remindActualIsRealUser()
	 * @method \boolean requireIsRealUser()
	 * @method bool hasIsRealUser()
	 * @method bool isIsRealUserFilled()
	 * @method \Jedi\User\Entity\JUser unsetIsRealUser()
	 * @method \boolean fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex getIndex()
	 * @method \Bitrix\Main\EO_UserIndex remindActualIndex()
	 * @method \Bitrix\Main\EO_UserIndex requireIndex()
	 * @method \Jedi\User\Entity\JUser setIndex(\Bitrix\Main\EO_UserIndex $object)
	 * @method \Jedi\User\Entity\JUser resetIndex()
	 * @method \Jedi\User\Entity\JUser unsetIndex()
	 * @method bool hasIndex()
	 * @method bool isIndexFilled()
	 * @method bool isIndexChanged()
	 * @method \Bitrix\Main\EO_UserIndex fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter getCounter()
	 * @method \Bitrix\Main\EO_UserCounter remindActualCounter()
	 * @method \Bitrix\Main\EO_UserCounter requireCounter()
	 * @method \Jedi\User\Entity\JUser setCounter(\Bitrix\Main\EO_UserCounter $object)
	 * @method \Jedi\User\Entity\JUser resetCounter()
	 * @method \Jedi\User\Entity\JUser unsetCounter()
	 * @method bool hasCounter()
	 * @method bool isCounterFilled()
	 * @method bool isCounterChanged()
	 * @method \Bitrix\Main\EO_UserCounter fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth getPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth remindActualPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth requirePhoneAuth()
	 * @method \Jedi\User\Entity\JUser setPhoneAuth(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method \Jedi\User\Entity\JUser resetPhoneAuth()
	 * @method \Jedi\User\Entity\JUser unsetPhoneAuth()
	 * @method bool hasPhoneAuth()
	 * @method bool isPhoneAuthFilled()
	 * @method bool isPhoneAuthChanged()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection requireGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method bool hasGroups()
	 * @method bool isGroupsFilled()
	 * @method bool isGroupsChanged()
	 * @method void addToGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeFromGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeAllGroups()
	 * @method \Jedi\User\Entity\JUser resetGroups()
	 * @method \Jedi\User\Entity\JUser unsetGroups()
	 * @method \Bitrix\Main\Localization\EO_Language getActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language remindActualActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language requireActiveLanguage()
	 * @method \Jedi\User\Entity\JUser setActiveLanguage(\Bitrix\Main\Localization\EO_Language $object)
	 * @method \Jedi\User\Entity\JUser resetActiveLanguage()
	 * @method \Jedi\User\Entity\JUser unsetActiveLanguage()
	 * @method bool hasActiveLanguage()
	 * @method bool isActiveLanguageFilled()
	 * @method bool isActiveLanguageChanged()
	 * @method \Bitrix\Main\Localization\EO_Language fillActiveLanguage()
	 * @method \string getNotificationLanguageId()
	 * @method \string remindActualNotificationLanguageId()
	 * @method \string requireNotificationLanguageId()
	 * @method bool hasNotificationLanguageId()
	 * @method bool isNotificationLanguageIdFilled()
	 * @method \Jedi\User\Entity\JUser unsetNotificationLanguageId()
	 * @method \string fillNotificationLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Jedi\User\Entity\JUser set($fieldName, $value)
	 * @method \Jedi\User\Entity\JUser reset($fieldName)
	 * @method \Jedi\User\Entity\JUser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Jedi\User\Entity\JUser wakeUp($data)
	 */
	class EO_JUser {
		/* @var \Jedi\User\Entity\JUserTable */
		static public $dataClass = '\Jedi\User\Entity\JUserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Jedi\User\Entity {
	/**
	 * JUserCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getBlockedList()
	 * @method \boolean[] fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegisterList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastActivityDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getExternalAuthIdList()
	 * @method \string[] fillExternalAuthId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getTimeZoneList()
	 * @method \string[] fillTimeZone()
	 * @method \int[] getTimeZoneOffsetList()
	 * @method \int[] fillTimeZoneOffset()
	 * @method \string[] getPersonalProfessionList()
	 * @method \string[] fillPersonalProfession()
	 * @method \string[] getPersonalPhoneList()
	 * @method \string[] fillPersonalPhone()
	 * @method \string[] getPersonalMobileList()
	 * @method \string[] fillPersonalMobile()
	 * @method \string[] getPersonalWwwList()
	 * @method \string[] fillPersonalWww()
	 * @method \string[] getPersonalIcqList()
	 * @method \string[] fillPersonalIcq()
	 * @method \string[] getPersonalFaxList()
	 * @method \string[] fillPersonalFax()
	 * @method \string[] getPersonalPagerList()
	 * @method \string[] fillPersonalPager()
	 * @method \string[] getPersonalStreetList()
	 * @method \string[] fillPersonalStreet()
	 * @method \string[] getPersonalMailboxList()
	 * @method \string[] fillPersonalMailbox()
	 * @method \string[] getPersonalCityList()
	 * @method \string[] fillPersonalCity()
	 * @method \string[] getPersonalStateList()
	 * @method \string[] fillPersonalState()
	 * @method \string[] getPersonalZipList()
	 * @method \string[] fillPersonalZip()
	 * @method \string[] getPersonalCountryList()
	 * @method \string[] fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date[] getPersonalBirthdayList()
	 * @method \Bitrix\Main\Type\Date[] fillPersonalBirthday()
	 * @method \string[] getPersonalGenderList()
	 * @method \string[] fillPersonalGender()
	 * @method \int[] getPersonalPhotoList()
	 * @method \int[] fillPersonalPhoto()
	 * @method \string[] getPersonalNotesList()
	 * @method \string[] fillPersonalNotes()
	 * @method \string[] getWorkCompanyList()
	 * @method \string[] fillWorkCompany()
	 * @method \string[] getWorkDepartmentList()
	 * @method \string[] fillWorkDepartment()
	 * @method \string[] getWorkPhoneList()
	 * @method \string[] fillWorkPhone()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getWorkWwwList()
	 * @method \string[] fillWorkWww()
	 * @method \string[] getWorkFaxList()
	 * @method \string[] fillWorkFax()
	 * @method \string[] getWorkPagerList()
	 * @method \string[] fillWorkPager()
	 * @method \string[] getWorkStreetList()
	 * @method \string[] fillWorkStreet()
	 * @method \string[] getWorkMailboxList()
	 * @method \string[] fillWorkMailbox()
	 * @method \string[] getWorkCityList()
	 * @method \string[] fillWorkCity()
	 * @method \string[] getWorkStateList()
	 * @method \string[] fillWorkState()
	 * @method \string[] getWorkZipList()
	 * @method \string[] fillWorkZip()
	 * @method \string[] getWorkCountryList()
	 * @method \string[] fillWorkCountry()
	 * @method \string[] getWorkProfileList()
	 * @method \string[] fillWorkProfile()
	 * @method \int[] getWorkLogoList()
	 * @method \int[] fillWorkLogo()
	 * @method \string[] getWorkNotesList()
	 * @method \string[] fillWorkNotes()
	 * @method \string[] getAdminNotesList()
	 * @method \string[] fillAdminNotes()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \boolean[] getIsOnlineList()
	 * @method \boolean[] fillIsOnline()
	 * @method \boolean[] getIsRealUserList()
	 * @method \boolean[] fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex[] getIndexList()
	 * @method \Jedi\User\Entity\JUserCollection getIndexCollection()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter[] getCounterList()
	 * @method \Jedi\User\Entity\JUserCollection getCounterCollection()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getPhoneAuthList()
	 * @method \Jedi\User\Entity\JUserCollection getPhoneAuthCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection[] getGroupsList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupsCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method \Bitrix\Main\Localization\EO_Language[] getActiveLanguageList()
	 * @method \Jedi\User\Entity\JUserCollection getActiveLanguageCollection()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fillActiveLanguage()
	 * @method \string[] getNotificationLanguageIdList()
	 * @method \string[] fillNotificationLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Jedi\User\Entity\JUser $object)
	 * @method bool has(\Jedi\User\Entity\JUser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Jedi\User\Entity\JUser getByPrimary($primary)
	 * @method \Jedi\User\Entity\JUser[] getAll()
	 * @method bool remove(\Jedi\User\Entity\JUser $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Jedi\User\Entity\JUserCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Jedi\User\Entity\JUser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Jedi\User\Entity\JUserCollection merge(?\Jedi\User\Entity\JUserCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_JUser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Jedi\User\Entity\JUserTable */
		static public $dataClass = '\Jedi\User\Entity\JUserTable';
	}
}
namespace Jedi\User\Entity {
	/**
	 * @method static EO_JUser_Query query()
	 * @method static EO_JUser_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_JUser_Result getById($id)
	 * @method static EO_JUser_Result getList(array $parameters = [])
	 * @method static EO_JUser_Entity getEntity()
	 * @method static \Jedi\User\Entity\JUser createObject($setDefaultValues = true)
	 * @method static \Jedi\User\Entity\JUserCollection createCollection()
	 * @method static \Jedi\User\Entity\JUser wakeUpObject($row)
	 * @method static \Jedi\User\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class JUserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_JUser_Result exec()
	 * @method \Jedi\User\Entity\JUser fetchObject()
	 * @method \Jedi\User\Entity\JUserCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_JUser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Jedi\User\Entity\JUser fetchObject()
	 * @method \Jedi\User\Entity\JUserCollection fetchCollection()
	 */
	class EO_JUser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Jedi\User\Entity\JUser createObject($setDefaultValues = true)
	 * @method \Jedi\User\Entity\JUserCollection createCollection()
	 * @method \Jedi\User\Entity\JUser wakeUpObject($row)
	 * @method \Jedi\User\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class EO_JUser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserTable */
namespace Bitrix\Main {
	/**
	 * EO_User
	 * @see \Bitrix\Main\UserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getUfInn()
	 * @method \string remindActualUfInn()
	 * @method \string requireUfInn()
	 * @method bool hasUfInn()
	 * @method bool isUfInnFilled()
	 * @method \Bitrix\Main\EO_User unsetUfInn()
	 * @method \string fillUfInn()
	 * @method \Bitrix\Main\EO_User setUfInn(\string $ufInn)
	 * @method bool isUfInnChanged()
	 * @method \string getUfOgrn()
	 * @method \string remindActualUfOgrn()
	 * @method \string requireUfOgrn()
	 * @method bool hasUfOgrn()
	 * @method bool isUfOgrnFilled()
	 * @method \Bitrix\Main\EO_User unsetUfOgrn()
	 * @method \string fillUfOgrn()
	 * @method \Bitrix\Main\EO_User setUfOgrn(\string $ufOgrn)
	 * @method bool isUfOgrnChanged()
	 * @method \string getUfCorrAcc()
	 * @method \string remindActualUfCorrAcc()
	 * @method \string requireUfCorrAcc()
	 * @method bool hasUfCorrAcc()
	 * @method bool isUfCorrAccFilled()
	 * @method \Bitrix\Main\EO_User unsetUfCorrAcc()
	 * @method \string fillUfCorrAcc()
	 * @method \Bitrix\Main\EO_User setUfCorrAcc(\string $ufCorrAcc)
	 * @method bool isUfCorrAccChanged()
	 * @method \string getUfCurrAcc()
	 * @method \string remindActualUfCurrAcc()
	 * @method \string requireUfCurrAcc()
	 * @method bool hasUfCurrAcc()
	 * @method bool isUfCurrAccFilled()
	 * @method \Bitrix\Main\EO_User unsetUfCurrAcc()
	 * @method \string fillUfCurrAcc()
	 * @method \Bitrix\Main\EO_User setUfCurrAcc(\string $ufCurrAcc)
	 * @method bool isUfCurrAccChanged()
	 * @method \string getUfKpp()
	 * @method \string remindActualUfKpp()
	 * @method \string requireUfKpp()
	 * @method bool hasUfKpp()
	 * @method bool isUfKppFilled()
	 * @method \Bitrix\Main\EO_User unsetUfKpp()
	 * @method \string fillUfKpp()
	 * @method \Bitrix\Main\EO_User setUfKpp(\string $ufKpp)
	 * @method bool isUfKppChanged()
	 * @method \string getUfBik()
	 * @method \string remindActualUfBik()
	 * @method \string requireUfBik()
	 * @method bool hasUfBik()
	 * @method bool isUfBikFilled()
	 * @method \Bitrix\Main\EO_User unsetUfBik()
	 * @method \string fillUfBik()
	 * @method \Bitrix\Main\EO_User setUfBik(\string $ufBik)
	 * @method bool isUfBikChanged()
	 * @method \string getUfPostAddress()
	 * @method \string remindActualUfPostAddress()
	 * @method \string requireUfPostAddress()
	 * @method bool hasUfPostAddress()
	 * @method bool isUfPostAddressFilled()
	 * @method \Bitrix\Main\EO_User unsetUfPostAddress()
	 * @method \string fillUfPostAddress()
	 * @method \Bitrix\Main\EO_User setUfPostAddress(\string $ufPostAddress)
	 * @method bool isUfPostAddressChanged()
	 * @method \string getUfLegalAddress()
	 * @method \string remindActualUfLegalAddress()
	 * @method \string requireUfLegalAddress()
	 * @method bool hasUfLegalAddress()
	 * @method bool isUfLegalAddressFilled()
	 * @method \Bitrix\Main\EO_User unsetUfLegalAddress()
	 * @method \string fillUfLegalAddress()
	 * @method \Bitrix\Main\EO_User setUfLegalAddress(\string $ufLegalAddress)
	 * @method bool isUfLegalAddressChanged()
	 * @method \string getUfBankName()
	 * @method \string remindActualUfBankName()
	 * @method \string requireUfBankName()
	 * @method bool hasUfBankName()
	 * @method bool isUfBankNameFilled()
	 * @method \Bitrix\Main\EO_User unsetUfBankName()
	 * @method \string fillUfBankName()
	 * @method \Bitrix\Main\EO_User setUfBankName(\string $ufBankName)
	 * @method bool isUfBankNameChanged()
	 */
	class EO_User {
		/* @var \Bitrix\Main\UserTable */
		static public $dataClass = '\Bitrix\Main\UserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_User_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getUfInnList()
	 * @method \string[] fillUfInn()
	 * @method \string[] getUfOgrnList()
	 * @method \string[] fillUfOgrn()
	 * @method \string[] getUfCorrAccList()
	 * @method \string[] fillUfCorrAcc()
	 * @method \string[] getUfCurrAccList()
	 * @method \string[] fillUfCurrAcc()
	 * @method \string[] getUfKppList()
	 * @method \string[] fillUfKpp()
	 * @method \string[] getUfBikList()
	 * @method \string[] fillUfBik()
	 * @method \string[] getUfPostAddressList()
	 * @method \string[] fillUfPostAddress()
	 * @method \string[] getUfLegalAddressList()
	 * @method \string[] fillUfLegalAddress()
	 * @method \string[] getUfBankNameList()
	 * @method \string[] fillUfBankName()
	 */
	class EO_User_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserTable */
		static public $dataClass = '\Bitrix\Main\UserTable';
	}
}
/* ORMENTITYANNOTATION:Craft\User\Entity\JUserTable */
namespace Craft\User\Entity {
	/**
	 * JUser
	 * @see \Craft\User\Entity\JUserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\User\Entity\JUser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLogin()
	 * @method \Craft\User\Entity\JUser setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Craft\User\Entity\JUser resetLogin()
	 * @method \Craft\User\Entity\JUser unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Craft\User\Entity\JUser setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Craft\User\Entity\JUser resetPassword()
	 * @method \Craft\User\Entity\JUser unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getEmail()
	 * @method \Craft\User\Entity\JUser setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Craft\User\Entity\JUser resetEmail()
	 * @method \Craft\User\Entity\JUser unsetEmail()
	 * @method \string fillEmail()
	 * @method \boolean getActive()
	 * @method \Craft\User\Entity\JUser setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\User\Entity\JUser resetActive()
	 * @method \Craft\User\Entity\JUser unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getBlocked()
	 * @method \Craft\User\Entity\JUser setBlocked(\boolean|\Bitrix\Main\DB\SqlExpression $blocked)
	 * @method bool hasBlocked()
	 * @method bool isBlockedFilled()
	 * @method bool isBlockedChanged()
	 * @method \boolean remindActualBlocked()
	 * @method \boolean requireBlocked()
	 * @method \Craft\User\Entity\JUser resetBlocked()
	 * @method \Craft\User\Entity\JUser unsetBlocked()
	 * @method \boolean fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime getDateRegister()
	 * @method \Craft\User\Entity\JUser setDateRegister(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRegister)
	 * @method bool hasDateRegister()
	 * @method bool isDateRegisterFilled()
	 * @method bool isDateRegisterChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegister()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegister()
	 * @method \Craft\User\Entity\JUser resetDateRegister()
	 * @method \Craft\User\Entity\JUser unsetDateRegister()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime getDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegShort()
	 * @method bool hasDateRegShort()
	 * @method bool isDateRegShortFilled()
	 * @method \Craft\User\Entity\JUser unsetDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime getLastLogin()
	 * @method \Craft\User\Entity\JUser setLastLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastLogin)
	 * @method bool hasLastLogin()
	 * @method bool isLastLoginFilled()
	 * @method bool isLastLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLogin()
	 * @method \Bitrix\Main\Type\DateTime requireLastLogin()
	 * @method \Craft\User\Entity\JUser resetLastLogin()
	 * @method \Craft\User\Entity\JUser unsetLastLogin()
	 * @method \Bitrix\Main\Type\DateTime fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime getLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastLoginShort()
	 * @method bool hasLastLoginShort()
	 * @method bool isLastLoginShortFilled()
	 * @method \Craft\User\Entity\JUser unsetLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime getLastActivityDate()
	 * @method \Craft\User\Entity\JUser setLastActivityDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastActivityDate)
	 * @method bool hasLastActivityDate()
	 * @method bool isLastActivityDateFilled()
	 * @method bool isLastActivityDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastActivityDate()
	 * @method \Craft\User\Entity\JUser resetLastActivityDate()
	 * @method \Craft\User\Entity\JUser unsetLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Craft\User\Entity\JUser setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Craft\User\Entity\JUser resetTimestampX()
	 * @method \Craft\User\Entity\JUser unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getName()
	 * @method \Craft\User\Entity\JUser setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\User\Entity\JUser resetName()
	 * @method \Craft\User\Entity\JUser unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Craft\User\Entity\JUser setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Craft\User\Entity\JUser resetSecondName()
	 * @method \Craft\User\Entity\JUser unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Craft\User\Entity\JUser setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Craft\User\Entity\JUser resetLastName()
	 * @method \Craft\User\Entity\JUser unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getTitle()
	 * @method \Craft\User\Entity\JUser setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Craft\User\Entity\JUser resetTitle()
	 * @method \Craft\User\Entity\JUser unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getExternalAuthId()
	 * @method \Craft\User\Entity\JUser setExternalAuthId(\string|\Bitrix\Main\DB\SqlExpression $externalAuthId)
	 * @method bool hasExternalAuthId()
	 * @method bool isExternalAuthIdFilled()
	 * @method bool isExternalAuthIdChanged()
	 * @method \string remindActualExternalAuthId()
	 * @method \string requireExternalAuthId()
	 * @method \Craft\User\Entity\JUser resetExternalAuthId()
	 * @method \Craft\User\Entity\JUser unsetExternalAuthId()
	 * @method \string fillExternalAuthId()
	 * @method \string getXmlId()
	 * @method \Craft\User\Entity\JUser setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Craft\User\Entity\JUser resetXmlId()
	 * @method \Craft\User\Entity\JUser unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getBxUserId()
	 * @method \Craft\User\Entity\JUser setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Craft\User\Entity\JUser resetBxUserId()
	 * @method \Craft\User\Entity\JUser unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getConfirmCode()
	 * @method \Craft\User\Entity\JUser setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Craft\User\Entity\JUser resetConfirmCode()
	 * @method \Craft\User\Entity\JUser unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \string getLid()
	 * @method \Craft\User\Entity\JUser setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Craft\User\Entity\JUser resetLid()
	 * @method \Craft\User\Entity\JUser unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \Craft\User\Entity\JUser setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Craft\User\Entity\JUser resetLanguageId()
	 * @method \Craft\User\Entity\JUser unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getTimeZone()
	 * @method \Craft\User\Entity\JUser setTimeZone(\string|\Bitrix\Main\DB\SqlExpression $timeZone)
	 * @method bool hasTimeZone()
	 * @method bool isTimeZoneFilled()
	 * @method bool isTimeZoneChanged()
	 * @method \string remindActualTimeZone()
	 * @method \string requireTimeZone()
	 * @method \Craft\User\Entity\JUser resetTimeZone()
	 * @method \Craft\User\Entity\JUser unsetTimeZone()
	 * @method \string fillTimeZone()
	 * @method \int getTimeZoneOffset()
	 * @method \Craft\User\Entity\JUser setTimeZoneOffset(\int|\Bitrix\Main\DB\SqlExpression $timeZoneOffset)
	 * @method bool hasTimeZoneOffset()
	 * @method bool isTimeZoneOffsetFilled()
	 * @method bool isTimeZoneOffsetChanged()
	 * @method \int remindActualTimeZoneOffset()
	 * @method \int requireTimeZoneOffset()
	 * @method \Craft\User\Entity\JUser resetTimeZoneOffset()
	 * @method \Craft\User\Entity\JUser unsetTimeZoneOffset()
	 * @method \int fillTimeZoneOffset()
	 * @method \string getPersonalProfession()
	 * @method \Craft\User\Entity\JUser setPersonalProfession(\string|\Bitrix\Main\DB\SqlExpression $personalProfession)
	 * @method bool hasPersonalProfession()
	 * @method bool isPersonalProfessionFilled()
	 * @method bool isPersonalProfessionChanged()
	 * @method \string remindActualPersonalProfession()
	 * @method \string requirePersonalProfession()
	 * @method \Craft\User\Entity\JUser resetPersonalProfession()
	 * @method \Craft\User\Entity\JUser unsetPersonalProfession()
	 * @method \string fillPersonalProfession()
	 * @method \string getPersonalPhone()
	 * @method \Craft\User\Entity\JUser setPersonalPhone(\string|\Bitrix\Main\DB\SqlExpression $personalPhone)
	 * @method bool hasPersonalPhone()
	 * @method bool isPersonalPhoneFilled()
	 * @method bool isPersonalPhoneChanged()
	 * @method \string remindActualPersonalPhone()
	 * @method \string requirePersonalPhone()
	 * @method \Craft\User\Entity\JUser resetPersonalPhone()
	 * @method \Craft\User\Entity\JUser unsetPersonalPhone()
	 * @method \string fillPersonalPhone()
	 * @method \string getPersonalMobile()
	 * @method \Craft\User\Entity\JUser setPersonalMobile(\string|\Bitrix\Main\DB\SqlExpression $personalMobile)
	 * @method bool hasPersonalMobile()
	 * @method bool isPersonalMobileFilled()
	 * @method bool isPersonalMobileChanged()
	 * @method \string remindActualPersonalMobile()
	 * @method \string requirePersonalMobile()
	 * @method \Craft\User\Entity\JUser resetPersonalMobile()
	 * @method \Craft\User\Entity\JUser unsetPersonalMobile()
	 * @method \string fillPersonalMobile()
	 * @method \string getPersonalWww()
	 * @method \Craft\User\Entity\JUser setPersonalWww(\string|\Bitrix\Main\DB\SqlExpression $personalWww)
	 * @method bool hasPersonalWww()
	 * @method bool isPersonalWwwFilled()
	 * @method bool isPersonalWwwChanged()
	 * @method \string remindActualPersonalWww()
	 * @method \string requirePersonalWww()
	 * @method \Craft\User\Entity\JUser resetPersonalWww()
	 * @method \Craft\User\Entity\JUser unsetPersonalWww()
	 * @method \string fillPersonalWww()
	 * @method \string getPersonalIcq()
	 * @method \Craft\User\Entity\JUser setPersonalIcq(\string|\Bitrix\Main\DB\SqlExpression $personalIcq)
	 * @method bool hasPersonalIcq()
	 * @method bool isPersonalIcqFilled()
	 * @method bool isPersonalIcqChanged()
	 * @method \string remindActualPersonalIcq()
	 * @method \string requirePersonalIcq()
	 * @method \Craft\User\Entity\JUser resetPersonalIcq()
	 * @method \Craft\User\Entity\JUser unsetPersonalIcq()
	 * @method \string fillPersonalIcq()
	 * @method \string getPersonalFax()
	 * @method \Craft\User\Entity\JUser setPersonalFax(\string|\Bitrix\Main\DB\SqlExpression $personalFax)
	 * @method bool hasPersonalFax()
	 * @method bool isPersonalFaxFilled()
	 * @method bool isPersonalFaxChanged()
	 * @method \string remindActualPersonalFax()
	 * @method \string requirePersonalFax()
	 * @method \Craft\User\Entity\JUser resetPersonalFax()
	 * @method \Craft\User\Entity\JUser unsetPersonalFax()
	 * @method \string fillPersonalFax()
	 * @method \string getPersonalPager()
	 * @method \Craft\User\Entity\JUser setPersonalPager(\string|\Bitrix\Main\DB\SqlExpression $personalPager)
	 * @method bool hasPersonalPager()
	 * @method bool isPersonalPagerFilled()
	 * @method bool isPersonalPagerChanged()
	 * @method \string remindActualPersonalPager()
	 * @method \string requirePersonalPager()
	 * @method \Craft\User\Entity\JUser resetPersonalPager()
	 * @method \Craft\User\Entity\JUser unsetPersonalPager()
	 * @method \string fillPersonalPager()
	 * @method \string getPersonalStreet()
	 * @method \Craft\User\Entity\JUser setPersonalStreet(\string|\Bitrix\Main\DB\SqlExpression $personalStreet)
	 * @method bool hasPersonalStreet()
	 * @method bool isPersonalStreetFilled()
	 * @method bool isPersonalStreetChanged()
	 * @method \string remindActualPersonalStreet()
	 * @method \string requirePersonalStreet()
	 * @method \Craft\User\Entity\JUser resetPersonalStreet()
	 * @method \Craft\User\Entity\JUser unsetPersonalStreet()
	 * @method \string fillPersonalStreet()
	 * @method \string getPersonalMailbox()
	 * @method \Craft\User\Entity\JUser setPersonalMailbox(\string|\Bitrix\Main\DB\SqlExpression $personalMailbox)
	 * @method bool hasPersonalMailbox()
	 * @method bool isPersonalMailboxFilled()
	 * @method bool isPersonalMailboxChanged()
	 * @method \string remindActualPersonalMailbox()
	 * @method \string requirePersonalMailbox()
	 * @method \Craft\User\Entity\JUser resetPersonalMailbox()
	 * @method \Craft\User\Entity\JUser unsetPersonalMailbox()
	 * @method \string fillPersonalMailbox()
	 * @method \string getPersonalCity()
	 * @method \Craft\User\Entity\JUser setPersonalCity(\string|\Bitrix\Main\DB\SqlExpression $personalCity)
	 * @method bool hasPersonalCity()
	 * @method bool isPersonalCityFilled()
	 * @method bool isPersonalCityChanged()
	 * @method \string remindActualPersonalCity()
	 * @method \string requirePersonalCity()
	 * @method \Craft\User\Entity\JUser resetPersonalCity()
	 * @method \Craft\User\Entity\JUser unsetPersonalCity()
	 * @method \string fillPersonalCity()
	 * @method \string getPersonalState()
	 * @method \Craft\User\Entity\JUser setPersonalState(\string|\Bitrix\Main\DB\SqlExpression $personalState)
	 * @method bool hasPersonalState()
	 * @method bool isPersonalStateFilled()
	 * @method bool isPersonalStateChanged()
	 * @method \string remindActualPersonalState()
	 * @method \string requirePersonalState()
	 * @method \Craft\User\Entity\JUser resetPersonalState()
	 * @method \Craft\User\Entity\JUser unsetPersonalState()
	 * @method \string fillPersonalState()
	 * @method \string getPersonalZip()
	 * @method \Craft\User\Entity\JUser setPersonalZip(\string|\Bitrix\Main\DB\SqlExpression $personalZip)
	 * @method bool hasPersonalZip()
	 * @method bool isPersonalZipFilled()
	 * @method bool isPersonalZipChanged()
	 * @method \string remindActualPersonalZip()
	 * @method \string requirePersonalZip()
	 * @method \Craft\User\Entity\JUser resetPersonalZip()
	 * @method \Craft\User\Entity\JUser unsetPersonalZip()
	 * @method \string fillPersonalZip()
	 * @method \string getPersonalCountry()
	 * @method \Craft\User\Entity\JUser setPersonalCountry(\string|\Bitrix\Main\DB\SqlExpression $personalCountry)
	 * @method bool hasPersonalCountry()
	 * @method bool isPersonalCountryFilled()
	 * @method bool isPersonalCountryChanged()
	 * @method \string remindActualPersonalCountry()
	 * @method \string requirePersonalCountry()
	 * @method \Craft\User\Entity\JUser resetPersonalCountry()
	 * @method \Craft\User\Entity\JUser unsetPersonalCountry()
	 * @method \string fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date getPersonalBirthday()
	 * @method \Craft\User\Entity\JUser setPersonalBirthday(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $personalBirthday)
	 * @method bool hasPersonalBirthday()
	 * @method bool isPersonalBirthdayFilled()
	 * @method bool isPersonalBirthdayChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date requirePersonalBirthday()
	 * @method \Craft\User\Entity\JUser resetPersonalBirthday()
	 * @method \Craft\User\Entity\JUser unsetPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date fillPersonalBirthday()
	 * @method \string getPersonalGender()
	 * @method \Craft\User\Entity\JUser setPersonalGender(\string|\Bitrix\Main\DB\SqlExpression $personalGender)
	 * @method bool hasPersonalGender()
	 * @method bool isPersonalGenderFilled()
	 * @method bool isPersonalGenderChanged()
	 * @method \string remindActualPersonalGender()
	 * @method \string requirePersonalGender()
	 * @method \Craft\User\Entity\JUser resetPersonalGender()
	 * @method \Craft\User\Entity\JUser unsetPersonalGender()
	 * @method \string fillPersonalGender()
	 * @method \int getPersonalPhoto()
	 * @method \Craft\User\Entity\JUser setPersonalPhoto(\int|\Bitrix\Main\DB\SqlExpression $personalPhoto)
	 * @method bool hasPersonalPhoto()
	 * @method bool isPersonalPhotoFilled()
	 * @method bool isPersonalPhotoChanged()
	 * @method \int remindActualPersonalPhoto()
	 * @method \int requirePersonalPhoto()
	 * @method \Craft\User\Entity\JUser resetPersonalPhoto()
	 * @method \Craft\User\Entity\JUser unsetPersonalPhoto()
	 * @method \int fillPersonalPhoto()
	 * @method \string getPersonalNotes()
	 * @method \Craft\User\Entity\JUser setPersonalNotes(\string|\Bitrix\Main\DB\SqlExpression $personalNotes)
	 * @method bool hasPersonalNotes()
	 * @method bool isPersonalNotesFilled()
	 * @method bool isPersonalNotesChanged()
	 * @method \string remindActualPersonalNotes()
	 * @method \string requirePersonalNotes()
	 * @method \Craft\User\Entity\JUser resetPersonalNotes()
	 * @method \Craft\User\Entity\JUser unsetPersonalNotes()
	 * @method \string fillPersonalNotes()
	 * @method \string getWorkCompany()
	 * @method \Craft\User\Entity\JUser setWorkCompany(\string|\Bitrix\Main\DB\SqlExpression $workCompany)
	 * @method bool hasWorkCompany()
	 * @method bool isWorkCompanyFilled()
	 * @method bool isWorkCompanyChanged()
	 * @method \string remindActualWorkCompany()
	 * @method \string requireWorkCompany()
	 * @method \Craft\User\Entity\JUser resetWorkCompany()
	 * @method \Craft\User\Entity\JUser unsetWorkCompany()
	 * @method \string fillWorkCompany()
	 * @method \string getWorkDepartment()
	 * @method \Craft\User\Entity\JUser setWorkDepartment(\string|\Bitrix\Main\DB\SqlExpression $workDepartment)
	 * @method bool hasWorkDepartment()
	 * @method bool isWorkDepartmentFilled()
	 * @method bool isWorkDepartmentChanged()
	 * @method \string remindActualWorkDepartment()
	 * @method \string requireWorkDepartment()
	 * @method \Craft\User\Entity\JUser resetWorkDepartment()
	 * @method \Craft\User\Entity\JUser unsetWorkDepartment()
	 * @method \string fillWorkDepartment()
	 * @method \string getWorkPhone()
	 * @method \Craft\User\Entity\JUser setWorkPhone(\string|\Bitrix\Main\DB\SqlExpression $workPhone)
	 * @method bool hasWorkPhone()
	 * @method bool isWorkPhoneFilled()
	 * @method bool isWorkPhoneChanged()
	 * @method \string remindActualWorkPhone()
	 * @method \string requireWorkPhone()
	 * @method \Craft\User\Entity\JUser resetWorkPhone()
	 * @method \Craft\User\Entity\JUser unsetWorkPhone()
	 * @method \string fillWorkPhone()
	 * @method \string getWorkPosition()
	 * @method \Craft\User\Entity\JUser setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Craft\User\Entity\JUser resetWorkPosition()
	 * @method \Craft\User\Entity\JUser unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getWorkWww()
	 * @method \Craft\User\Entity\JUser setWorkWww(\string|\Bitrix\Main\DB\SqlExpression $workWww)
	 * @method bool hasWorkWww()
	 * @method bool isWorkWwwFilled()
	 * @method bool isWorkWwwChanged()
	 * @method \string remindActualWorkWww()
	 * @method \string requireWorkWww()
	 * @method \Craft\User\Entity\JUser resetWorkWww()
	 * @method \Craft\User\Entity\JUser unsetWorkWww()
	 * @method \string fillWorkWww()
	 * @method \string getWorkFax()
	 * @method \Craft\User\Entity\JUser setWorkFax(\string|\Bitrix\Main\DB\SqlExpression $workFax)
	 * @method bool hasWorkFax()
	 * @method bool isWorkFaxFilled()
	 * @method bool isWorkFaxChanged()
	 * @method \string remindActualWorkFax()
	 * @method \string requireWorkFax()
	 * @method \Craft\User\Entity\JUser resetWorkFax()
	 * @method \Craft\User\Entity\JUser unsetWorkFax()
	 * @method \string fillWorkFax()
	 * @method \string getWorkPager()
	 * @method \Craft\User\Entity\JUser setWorkPager(\string|\Bitrix\Main\DB\SqlExpression $workPager)
	 * @method bool hasWorkPager()
	 * @method bool isWorkPagerFilled()
	 * @method bool isWorkPagerChanged()
	 * @method \string remindActualWorkPager()
	 * @method \string requireWorkPager()
	 * @method \Craft\User\Entity\JUser resetWorkPager()
	 * @method \Craft\User\Entity\JUser unsetWorkPager()
	 * @method \string fillWorkPager()
	 * @method \string getWorkStreet()
	 * @method \Craft\User\Entity\JUser setWorkStreet(\string|\Bitrix\Main\DB\SqlExpression $workStreet)
	 * @method bool hasWorkStreet()
	 * @method bool isWorkStreetFilled()
	 * @method bool isWorkStreetChanged()
	 * @method \string remindActualWorkStreet()
	 * @method \string requireWorkStreet()
	 * @method \Craft\User\Entity\JUser resetWorkStreet()
	 * @method \Craft\User\Entity\JUser unsetWorkStreet()
	 * @method \string fillWorkStreet()
	 * @method \string getWorkMailbox()
	 * @method \Craft\User\Entity\JUser setWorkMailbox(\string|\Bitrix\Main\DB\SqlExpression $workMailbox)
	 * @method bool hasWorkMailbox()
	 * @method bool isWorkMailboxFilled()
	 * @method bool isWorkMailboxChanged()
	 * @method \string remindActualWorkMailbox()
	 * @method \string requireWorkMailbox()
	 * @method \Craft\User\Entity\JUser resetWorkMailbox()
	 * @method \Craft\User\Entity\JUser unsetWorkMailbox()
	 * @method \string fillWorkMailbox()
	 * @method \string getWorkCity()
	 * @method \Craft\User\Entity\JUser setWorkCity(\string|\Bitrix\Main\DB\SqlExpression $workCity)
	 * @method bool hasWorkCity()
	 * @method bool isWorkCityFilled()
	 * @method bool isWorkCityChanged()
	 * @method \string remindActualWorkCity()
	 * @method \string requireWorkCity()
	 * @method \Craft\User\Entity\JUser resetWorkCity()
	 * @method \Craft\User\Entity\JUser unsetWorkCity()
	 * @method \string fillWorkCity()
	 * @method \string getWorkState()
	 * @method \Craft\User\Entity\JUser setWorkState(\string|\Bitrix\Main\DB\SqlExpression $workState)
	 * @method bool hasWorkState()
	 * @method bool isWorkStateFilled()
	 * @method bool isWorkStateChanged()
	 * @method \string remindActualWorkState()
	 * @method \string requireWorkState()
	 * @method \Craft\User\Entity\JUser resetWorkState()
	 * @method \Craft\User\Entity\JUser unsetWorkState()
	 * @method \string fillWorkState()
	 * @method \string getWorkZip()
	 * @method \Craft\User\Entity\JUser setWorkZip(\string|\Bitrix\Main\DB\SqlExpression $workZip)
	 * @method bool hasWorkZip()
	 * @method bool isWorkZipFilled()
	 * @method bool isWorkZipChanged()
	 * @method \string remindActualWorkZip()
	 * @method \string requireWorkZip()
	 * @method \Craft\User\Entity\JUser resetWorkZip()
	 * @method \Craft\User\Entity\JUser unsetWorkZip()
	 * @method \string fillWorkZip()
	 * @method \string getWorkCountry()
	 * @method \Craft\User\Entity\JUser setWorkCountry(\string|\Bitrix\Main\DB\SqlExpression $workCountry)
	 * @method bool hasWorkCountry()
	 * @method bool isWorkCountryFilled()
	 * @method bool isWorkCountryChanged()
	 * @method \string remindActualWorkCountry()
	 * @method \string requireWorkCountry()
	 * @method \Craft\User\Entity\JUser resetWorkCountry()
	 * @method \Craft\User\Entity\JUser unsetWorkCountry()
	 * @method \string fillWorkCountry()
	 * @method \string getWorkProfile()
	 * @method \Craft\User\Entity\JUser setWorkProfile(\string|\Bitrix\Main\DB\SqlExpression $workProfile)
	 * @method bool hasWorkProfile()
	 * @method bool isWorkProfileFilled()
	 * @method bool isWorkProfileChanged()
	 * @method \string remindActualWorkProfile()
	 * @method \string requireWorkProfile()
	 * @method \Craft\User\Entity\JUser resetWorkProfile()
	 * @method \Craft\User\Entity\JUser unsetWorkProfile()
	 * @method \string fillWorkProfile()
	 * @method \int getWorkLogo()
	 * @method \Craft\User\Entity\JUser setWorkLogo(\int|\Bitrix\Main\DB\SqlExpression $workLogo)
	 * @method bool hasWorkLogo()
	 * @method bool isWorkLogoFilled()
	 * @method bool isWorkLogoChanged()
	 * @method \int remindActualWorkLogo()
	 * @method \int requireWorkLogo()
	 * @method \Craft\User\Entity\JUser resetWorkLogo()
	 * @method \Craft\User\Entity\JUser unsetWorkLogo()
	 * @method \int fillWorkLogo()
	 * @method \string getWorkNotes()
	 * @method \Craft\User\Entity\JUser setWorkNotes(\string|\Bitrix\Main\DB\SqlExpression $workNotes)
	 * @method bool hasWorkNotes()
	 * @method bool isWorkNotesFilled()
	 * @method bool isWorkNotesChanged()
	 * @method \string remindActualWorkNotes()
	 * @method \string requireWorkNotes()
	 * @method \Craft\User\Entity\JUser resetWorkNotes()
	 * @method \Craft\User\Entity\JUser unsetWorkNotes()
	 * @method \string fillWorkNotes()
	 * @method \string getAdminNotes()
	 * @method \Craft\User\Entity\JUser setAdminNotes(\string|\Bitrix\Main\DB\SqlExpression $adminNotes)
	 * @method bool hasAdminNotes()
	 * @method bool isAdminNotesFilled()
	 * @method bool isAdminNotesChanged()
	 * @method \string remindActualAdminNotes()
	 * @method \string requireAdminNotes()
	 * @method \Craft\User\Entity\JUser resetAdminNotes()
	 * @method \Craft\User\Entity\JUser unsetAdminNotes()
	 * @method \string fillAdminNotes()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Craft\User\Entity\JUser unsetShortName()
	 * @method \string fillShortName()
	 * @method \boolean getIsOnline()
	 * @method \boolean remindActualIsOnline()
	 * @method \boolean requireIsOnline()
	 * @method bool hasIsOnline()
	 * @method bool isIsOnlineFilled()
	 * @method \Craft\User\Entity\JUser unsetIsOnline()
	 * @method \boolean fillIsOnline()
	 * @method \boolean getIsRealUser()
	 * @method \boolean remindActualIsRealUser()
	 * @method \boolean requireIsRealUser()
	 * @method bool hasIsRealUser()
	 * @method bool isIsRealUserFilled()
	 * @method \Craft\User\Entity\JUser unsetIsRealUser()
	 * @method \boolean fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex getIndex()
	 * @method \Bitrix\Main\EO_UserIndex remindActualIndex()
	 * @method \Bitrix\Main\EO_UserIndex requireIndex()
	 * @method \Craft\User\Entity\JUser setIndex(\Bitrix\Main\EO_UserIndex $object)
	 * @method \Craft\User\Entity\JUser resetIndex()
	 * @method \Craft\User\Entity\JUser unsetIndex()
	 * @method bool hasIndex()
	 * @method bool isIndexFilled()
	 * @method bool isIndexChanged()
	 * @method \Bitrix\Main\EO_UserIndex fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter getCounter()
	 * @method \Bitrix\Main\EO_UserCounter remindActualCounter()
	 * @method \Bitrix\Main\EO_UserCounter requireCounter()
	 * @method \Craft\User\Entity\JUser setCounter(\Bitrix\Main\EO_UserCounter $object)
	 * @method \Craft\User\Entity\JUser resetCounter()
	 * @method \Craft\User\Entity\JUser unsetCounter()
	 * @method bool hasCounter()
	 * @method bool isCounterFilled()
	 * @method bool isCounterChanged()
	 * @method \Bitrix\Main\EO_UserCounter fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth getPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth remindActualPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth requirePhoneAuth()
	 * @method \Craft\User\Entity\JUser setPhoneAuth(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method \Craft\User\Entity\JUser resetPhoneAuth()
	 * @method \Craft\User\Entity\JUser unsetPhoneAuth()
	 * @method bool hasPhoneAuth()
	 * @method bool isPhoneAuthFilled()
	 * @method bool isPhoneAuthChanged()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection requireGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method bool hasGroups()
	 * @method bool isGroupsFilled()
	 * @method bool isGroupsChanged()
	 * @method void addToGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeFromGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeAllGroups()
	 * @method \Craft\User\Entity\JUser resetGroups()
	 * @method \Craft\User\Entity\JUser unsetGroups()
	 * @method \Bitrix\Main\Localization\EO_Language getActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language remindActualActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language requireActiveLanguage()
	 * @method \Craft\User\Entity\JUser setActiveLanguage(\Bitrix\Main\Localization\EO_Language $object)
	 * @method \Craft\User\Entity\JUser resetActiveLanguage()
	 * @method \Craft\User\Entity\JUser unsetActiveLanguage()
	 * @method bool hasActiveLanguage()
	 * @method bool isActiveLanguageFilled()
	 * @method bool isActiveLanguageChanged()
	 * @method \Bitrix\Main\Localization\EO_Language fillActiveLanguage()
	 * @method \string getNotificationLanguageId()
	 * @method \string remindActualNotificationLanguageId()
	 * @method \string requireNotificationLanguageId()
	 * @method bool hasNotificationLanguageId()
	 * @method bool isNotificationLanguageIdFilled()
	 * @method \Craft\User\Entity\JUser unsetNotificationLanguageId()
	 * @method \string fillNotificationLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\User\Entity\JUser set($fieldName, $value)
	 * @method \Craft\User\Entity\JUser reset($fieldName)
	 * @method \Craft\User\Entity\JUser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\User\Entity\JUser wakeUp($data)
	 */
	class EO_JUser {
		/* @var \Craft\User\Entity\JUserTable */
		static public $dataClass = '\Craft\User\Entity\JUserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\User\Entity {
	/**
	 * JUserCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getBlockedList()
	 * @method \boolean[] fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegisterList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastActivityDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getExternalAuthIdList()
	 * @method \string[] fillExternalAuthId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getTimeZoneList()
	 * @method \string[] fillTimeZone()
	 * @method \int[] getTimeZoneOffsetList()
	 * @method \int[] fillTimeZoneOffset()
	 * @method \string[] getPersonalProfessionList()
	 * @method \string[] fillPersonalProfession()
	 * @method \string[] getPersonalPhoneList()
	 * @method \string[] fillPersonalPhone()
	 * @method \string[] getPersonalMobileList()
	 * @method \string[] fillPersonalMobile()
	 * @method \string[] getPersonalWwwList()
	 * @method \string[] fillPersonalWww()
	 * @method \string[] getPersonalIcqList()
	 * @method \string[] fillPersonalIcq()
	 * @method \string[] getPersonalFaxList()
	 * @method \string[] fillPersonalFax()
	 * @method \string[] getPersonalPagerList()
	 * @method \string[] fillPersonalPager()
	 * @method \string[] getPersonalStreetList()
	 * @method \string[] fillPersonalStreet()
	 * @method \string[] getPersonalMailboxList()
	 * @method \string[] fillPersonalMailbox()
	 * @method \string[] getPersonalCityList()
	 * @method \string[] fillPersonalCity()
	 * @method \string[] getPersonalStateList()
	 * @method \string[] fillPersonalState()
	 * @method \string[] getPersonalZipList()
	 * @method \string[] fillPersonalZip()
	 * @method \string[] getPersonalCountryList()
	 * @method \string[] fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date[] getPersonalBirthdayList()
	 * @method \Bitrix\Main\Type\Date[] fillPersonalBirthday()
	 * @method \string[] getPersonalGenderList()
	 * @method \string[] fillPersonalGender()
	 * @method \int[] getPersonalPhotoList()
	 * @method \int[] fillPersonalPhoto()
	 * @method \string[] getPersonalNotesList()
	 * @method \string[] fillPersonalNotes()
	 * @method \string[] getWorkCompanyList()
	 * @method \string[] fillWorkCompany()
	 * @method \string[] getWorkDepartmentList()
	 * @method \string[] fillWorkDepartment()
	 * @method \string[] getWorkPhoneList()
	 * @method \string[] fillWorkPhone()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getWorkWwwList()
	 * @method \string[] fillWorkWww()
	 * @method \string[] getWorkFaxList()
	 * @method \string[] fillWorkFax()
	 * @method \string[] getWorkPagerList()
	 * @method \string[] fillWorkPager()
	 * @method \string[] getWorkStreetList()
	 * @method \string[] fillWorkStreet()
	 * @method \string[] getWorkMailboxList()
	 * @method \string[] fillWorkMailbox()
	 * @method \string[] getWorkCityList()
	 * @method \string[] fillWorkCity()
	 * @method \string[] getWorkStateList()
	 * @method \string[] fillWorkState()
	 * @method \string[] getWorkZipList()
	 * @method \string[] fillWorkZip()
	 * @method \string[] getWorkCountryList()
	 * @method \string[] fillWorkCountry()
	 * @method \string[] getWorkProfileList()
	 * @method \string[] fillWorkProfile()
	 * @method \int[] getWorkLogoList()
	 * @method \int[] fillWorkLogo()
	 * @method \string[] getWorkNotesList()
	 * @method \string[] fillWorkNotes()
	 * @method \string[] getAdminNotesList()
	 * @method \string[] fillAdminNotes()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \boolean[] getIsOnlineList()
	 * @method \boolean[] fillIsOnline()
	 * @method \boolean[] getIsRealUserList()
	 * @method \boolean[] fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex[] getIndexList()
	 * @method \Craft\User\Entity\JUserCollection getIndexCollection()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter[] getCounterList()
	 * @method \Craft\User\Entity\JUserCollection getCounterCollection()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getPhoneAuthList()
	 * @method \Craft\User\Entity\JUserCollection getPhoneAuthCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection[] getGroupsList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupsCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method \Bitrix\Main\Localization\EO_Language[] getActiveLanguageList()
	 * @method \Craft\User\Entity\JUserCollection getActiveLanguageCollection()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fillActiveLanguage()
	 * @method \string[] getNotificationLanguageIdList()
	 * @method \string[] fillNotificationLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\User\Entity\JUser $object)
	 * @method bool has(\Craft\User\Entity\JUser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\User\Entity\JUser getByPrimary($primary)
	 * @method \Craft\User\Entity\JUser[] getAll()
	 * @method bool remove(\Craft\User\Entity\JUser $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\User\Entity\JUserCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\User\Entity\JUser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\User\Entity\JUserCollection merge(?\Craft\User\Entity\JUserCollection $collection)
	 * @method bool isEmpty()
	 */
	class EO_JUser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\User\Entity\JUserTable */
		static public $dataClass = '\Craft\User\Entity\JUserTable';
	}
}
namespace Craft\User\Entity {
	/**
	 * @method static EO_JUser_Query query()
	 * @method static EO_JUser_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_JUser_Result getById($id)
	 * @method static EO_JUser_Result getList(array $parameters = [])
	 * @method static EO_JUser_Entity getEntity()
	 * @method static \Craft\User\Entity\JUser createObject($setDefaultValues = true)
	 * @method static \Craft\User\Entity\JUserCollection createCollection()
	 * @method static \Craft\User\Entity\JUser wakeUpObject($row)
	 * @method static \Craft\User\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class JUserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_JUser_Result exec()
	 * @method \Craft\User\Entity\JUser fetchObject()
	 * @method \Craft\User\Entity\JUserCollection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_JUser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\User\Entity\JUser fetchObject()
	 * @method \Craft\User\Entity\JUserCollection fetchCollection()
	 */
	class EO_JUser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\User\Entity\JUser createObject($setDefaultValues = true)
	 * @method \Craft\User\Entity\JUserCollection createCollection()
	 * @method \Craft\User\Entity\JUser wakeUpObject($row)
	 * @method \Craft\User\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class EO_JUser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\User\Application\Entity\JUserTable */
namespace Craft\User\Application\Entity {
	/**
	 * JUser
	 * @see \Craft\User\Application\Entity\JUserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\User\Application\Entity\JUser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLogin()
	 * @method \Craft\User\Application\Entity\JUser setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Craft\User\Application\Entity\JUser resetLogin()
	 * @method \Craft\User\Application\Entity\JUser unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Craft\User\Application\Entity\JUser setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Craft\User\Application\Entity\JUser resetPassword()
	 * @method \Craft\User\Application\Entity\JUser unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getEmail()
	 * @method \Craft\User\Application\Entity\JUser setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Craft\User\Application\Entity\JUser resetEmail()
	 * @method \Craft\User\Application\Entity\JUser unsetEmail()
	 * @method \string fillEmail()
	 * @method \boolean getActive()
	 * @method \Craft\User\Application\Entity\JUser setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\User\Application\Entity\JUser resetActive()
	 * @method \Craft\User\Application\Entity\JUser unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getBlocked()
	 * @method \Craft\User\Application\Entity\JUser setBlocked(\boolean|\Bitrix\Main\DB\SqlExpression $blocked)
	 * @method bool hasBlocked()
	 * @method bool isBlockedFilled()
	 * @method bool isBlockedChanged()
	 * @method \boolean remindActualBlocked()
	 * @method \boolean requireBlocked()
	 * @method \Craft\User\Application\Entity\JUser resetBlocked()
	 * @method \Craft\User\Application\Entity\JUser unsetBlocked()
	 * @method \boolean fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime getDateRegister()
	 * @method \Craft\User\Application\Entity\JUser setDateRegister(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRegister)
	 * @method bool hasDateRegister()
	 * @method bool isDateRegisterFilled()
	 * @method bool isDateRegisterChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegister()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegister()
	 * @method \Craft\User\Application\Entity\JUser resetDateRegister()
	 * @method \Craft\User\Application\Entity\JUser unsetDateRegister()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime getDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegShort()
	 * @method bool hasDateRegShort()
	 * @method bool isDateRegShortFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime getLastLogin()
	 * @method \Craft\User\Application\Entity\JUser setLastLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastLogin)
	 * @method bool hasLastLogin()
	 * @method bool isLastLoginFilled()
	 * @method bool isLastLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLogin()
	 * @method \Bitrix\Main\Type\DateTime requireLastLogin()
	 * @method \Craft\User\Application\Entity\JUser resetLastLogin()
	 * @method \Craft\User\Application\Entity\JUser unsetLastLogin()
	 * @method \Bitrix\Main\Type\DateTime fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime getLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastLoginShort()
	 * @method bool hasLastLoginShort()
	 * @method bool isLastLoginShortFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime getLastActivityDate()
	 * @method \Craft\User\Application\Entity\JUser setLastActivityDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastActivityDate)
	 * @method bool hasLastActivityDate()
	 * @method bool isLastActivityDateFilled()
	 * @method bool isLastActivityDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastActivityDate()
	 * @method \Craft\User\Application\Entity\JUser resetLastActivityDate()
	 * @method \Craft\User\Application\Entity\JUser unsetLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Craft\User\Application\Entity\JUser setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Craft\User\Application\Entity\JUser resetTimestampX()
	 * @method \Craft\User\Application\Entity\JUser unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getName()
	 * @method \Craft\User\Application\Entity\JUser setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\User\Application\Entity\JUser resetName()
	 * @method \Craft\User\Application\Entity\JUser unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Craft\User\Application\Entity\JUser setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Craft\User\Application\Entity\JUser resetSecondName()
	 * @method \Craft\User\Application\Entity\JUser unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Craft\User\Application\Entity\JUser setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Craft\User\Application\Entity\JUser resetLastName()
	 * @method \Craft\User\Application\Entity\JUser unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getTitle()
	 * @method \Craft\User\Application\Entity\JUser setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Craft\User\Application\Entity\JUser resetTitle()
	 * @method \Craft\User\Application\Entity\JUser unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getExternalAuthId()
	 * @method \Craft\User\Application\Entity\JUser setExternalAuthId(\string|\Bitrix\Main\DB\SqlExpression $externalAuthId)
	 * @method bool hasExternalAuthId()
	 * @method bool isExternalAuthIdFilled()
	 * @method bool isExternalAuthIdChanged()
	 * @method \string remindActualExternalAuthId()
	 * @method \string requireExternalAuthId()
	 * @method \Craft\User\Application\Entity\JUser resetExternalAuthId()
	 * @method \Craft\User\Application\Entity\JUser unsetExternalAuthId()
	 * @method \string fillExternalAuthId()
	 * @method \string getXmlId()
	 * @method \Craft\User\Application\Entity\JUser setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Craft\User\Application\Entity\JUser resetXmlId()
	 * @method \Craft\User\Application\Entity\JUser unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getBxUserId()
	 * @method \Craft\User\Application\Entity\JUser setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Craft\User\Application\Entity\JUser resetBxUserId()
	 * @method \Craft\User\Application\Entity\JUser unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getConfirmCode()
	 * @method \Craft\User\Application\Entity\JUser setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Craft\User\Application\Entity\JUser resetConfirmCode()
	 * @method \Craft\User\Application\Entity\JUser unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \string getLid()
	 * @method \Craft\User\Application\Entity\JUser setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Craft\User\Application\Entity\JUser resetLid()
	 * @method \Craft\User\Application\Entity\JUser unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \Craft\User\Application\Entity\JUser setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Craft\User\Application\Entity\JUser resetLanguageId()
	 * @method \Craft\User\Application\Entity\JUser unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getTimeZone()
	 * @method \Craft\User\Application\Entity\JUser setTimeZone(\string|\Bitrix\Main\DB\SqlExpression $timeZone)
	 * @method bool hasTimeZone()
	 * @method bool isTimeZoneFilled()
	 * @method bool isTimeZoneChanged()
	 * @method \string remindActualTimeZone()
	 * @method \string requireTimeZone()
	 * @method \Craft\User\Application\Entity\JUser resetTimeZone()
	 * @method \Craft\User\Application\Entity\JUser unsetTimeZone()
	 * @method \string fillTimeZone()
	 * @method \int getTimeZoneOffset()
	 * @method \Craft\User\Application\Entity\JUser setTimeZoneOffset(\int|\Bitrix\Main\DB\SqlExpression $timeZoneOffset)
	 * @method bool hasTimeZoneOffset()
	 * @method bool isTimeZoneOffsetFilled()
	 * @method bool isTimeZoneOffsetChanged()
	 * @method \int remindActualTimeZoneOffset()
	 * @method \int requireTimeZoneOffset()
	 * @method \Craft\User\Application\Entity\JUser resetTimeZoneOffset()
	 * @method \Craft\User\Application\Entity\JUser unsetTimeZoneOffset()
	 * @method \int fillTimeZoneOffset()
	 * @method \string getPersonalProfession()
	 * @method \Craft\User\Application\Entity\JUser setPersonalProfession(\string|\Bitrix\Main\DB\SqlExpression $personalProfession)
	 * @method bool hasPersonalProfession()
	 * @method bool isPersonalProfessionFilled()
	 * @method bool isPersonalProfessionChanged()
	 * @method \string remindActualPersonalProfession()
	 * @method \string requirePersonalProfession()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalProfession()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalProfession()
	 * @method \string fillPersonalProfession()
	 * @method \string getPersonalPhone()
	 * @method \Craft\User\Application\Entity\JUser setPersonalPhone(\string|\Bitrix\Main\DB\SqlExpression $personalPhone)
	 * @method bool hasPersonalPhone()
	 * @method bool isPersonalPhoneFilled()
	 * @method bool isPersonalPhoneChanged()
	 * @method \string remindActualPersonalPhone()
	 * @method \string requirePersonalPhone()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalPhone()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalPhone()
	 * @method \string fillPersonalPhone()
	 * @method \string getPersonalMobile()
	 * @method \Craft\User\Application\Entity\JUser setPersonalMobile(\string|\Bitrix\Main\DB\SqlExpression $personalMobile)
	 * @method bool hasPersonalMobile()
	 * @method bool isPersonalMobileFilled()
	 * @method bool isPersonalMobileChanged()
	 * @method \string remindActualPersonalMobile()
	 * @method \string requirePersonalMobile()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalMobile()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalMobile()
	 * @method \string fillPersonalMobile()
	 * @method \string getPersonalWww()
	 * @method \Craft\User\Application\Entity\JUser setPersonalWww(\string|\Bitrix\Main\DB\SqlExpression $personalWww)
	 * @method bool hasPersonalWww()
	 * @method bool isPersonalWwwFilled()
	 * @method bool isPersonalWwwChanged()
	 * @method \string remindActualPersonalWww()
	 * @method \string requirePersonalWww()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalWww()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalWww()
	 * @method \string fillPersonalWww()
	 * @method \string getPersonalIcq()
	 * @method \Craft\User\Application\Entity\JUser setPersonalIcq(\string|\Bitrix\Main\DB\SqlExpression $personalIcq)
	 * @method bool hasPersonalIcq()
	 * @method bool isPersonalIcqFilled()
	 * @method bool isPersonalIcqChanged()
	 * @method \string remindActualPersonalIcq()
	 * @method \string requirePersonalIcq()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalIcq()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalIcq()
	 * @method \string fillPersonalIcq()
	 * @method \string getPersonalFax()
	 * @method \Craft\User\Application\Entity\JUser setPersonalFax(\string|\Bitrix\Main\DB\SqlExpression $personalFax)
	 * @method bool hasPersonalFax()
	 * @method bool isPersonalFaxFilled()
	 * @method bool isPersonalFaxChanged()
	 * @method \string remindActualPersonalFax()
	 * @method \string requirePersonalFax()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalFax()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalFax()
	 * @method \string fillPersonalFax()
	 * @method \string getPersonalPager()
	 * @method \Craft\User\Application\Entity\JUser setPersonalPager(\string|\Bitrix\Main\DB\SqlExpression $personalPager)
	 * @method bool hasPersonalPager()
	 * @method bool isPersonalPagerFilled()
	 * @method bool isPersonalPagerChanged()
	 * @method \string remindActualPersonalPager()
	 * @method \string requirePersonalPager()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalPager()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalPager()
	 * @method \string fillPersonalPager()
	 * @method \string getPersonalStreet()
	 * @method \Craft\User\Application\Entity\JUser setPersonalStreet(\string|\Bitrix\Main\DB\SqlExpression $personalStreet)
	 * @method bool hasPersonalStreet()
	 * @method bool isPersonalStreetFilled()
	 * @method bool isPersonalStreetChanged()
	 * @method \string remindActualPersonalStreet()
	 * @method \string requirePersonalStreet()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalStreet()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalStreet()
	 * @method \string fillPersonalStreet()
	 * @method \string getPersonalMailbox()
	 * @method \Craft\User\Application\Entity\JUser setPersonalMailbox(\string|\Bitrix\Main\DB\SqlExpression $personalMailbox)
	 * @method bool hasPersonalMailbox()
	 * @method bool isPersonalMailboxFilled()
	 * @method bool isPersonalMailboxChanged()
	 * @method \string remindActualPersonalMailbox()
	 * @method \string requirePersonalMailbox()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalMailbox()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalMailbox()
	 * @method \string fillPersonalMailbox()
	 * @method \string getPersonalCity()
	 * @method \Craft\User\Application\Entity\JUser setPersonalCity(\string|\Bitrix\Main\DB\SqlExpression $personalCity)
	 * @method bool hasPersonalCity()
	 * @method bool isPersonalCityFilled()
	 * @method bool isPersonalCityChanged()
	 * @method \string remindActualPersonalCity()
	 * @method \string requirePersonalCity()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalCity()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalCity()
	 * @method \string fillPersonalCity()
	 * @method \string getPersonalState()
	 * @method \Craft\User\Application\Entity\JUser setPersonalState(\string|\Bitrix\Main\DB\SqlExpression $personalState)
	 * @method bool hasPersonalState()
	 * @method bool isPersonalStateFilled()
	 * @method bool isPersonalStateChanged()
	 * @method \string remindActualPersonalState()
	 * @method \string requirePersonalState()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalState()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalState()
	 * @method \string fillPersonalState()
	 * @method \string getPersonalZip()
	 * @method \Craft\User\Application\Entity\JUser setPersonalZip(\string|\Bitrix\Main\DB\SqlExpression $personalZip)
	 * @method bool hasPersonalZip()
	 * @method bool isPersonalZipFilled()
	 * @method bool isPersonalZipChanged()
	 * @method \string remindActualPersonalZip()
	 * @method \string requirePersonalZip()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalZip()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalZip()
	 * @method \string fillPersonalZip()
	 * @method \string getPersonalCountry()
	 * @method \Craft\User\Application\Entity\JUser setPersonalCountry(\string|\Bitrix\Main\DB\SqlExpression $personalCountry)
	 * @method bool hasPersonalCountry()
	 * @method bool isPersonalCountryFilled()
	 * @method bool isPersonalCountryChanged()
	 * @method \string remindActualPersonalCountry()
	 * @method \string requirePersonalCountry()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalCountry()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalCountry()
	 * @method \string fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date getPersonalBirthday()
	 * @method \Craft\User\Application\Entity\JUser setPersonalBirthday(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $personalBirthday)
	 * @method bool hasPersonalBirthday()
	 * @method bool isPersonalBirthdayFilled()
	 * @method bool isPersonalBirthdayChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date requirePersonalBirthday()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalBirthday()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date fillPersonalBirthday()
	 * @method \string getPersonalGender()
	 * @method \Craft\User\Application\Entity\JUser setPersonalGender(\string|\Bitrix\Main\DB\SqlExpression $personalGender)
	 * @method bool hasPersonalGender()
	 * @method bool isPersonalGenderFilled()
	 * @method bool isPersonalGenderChanged()
	 * @method \string remindActualPersonalGender()
	 * @method \string requirePersonalGender()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalGender()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalGender()
	 * @method \string fillPersonalGender()
	 * @method \int getPersonalPhoto()
	 * @method \Craft\User\Application\Entity\JUser setPersonalPhoto(\int|\Bitrix\Main\DB\SqlExpression $personalPhoto)
	 * @method bool hasPersonalPhoto()
	 * @method bool isPersonalPhotoFilled()
	 * @method bool isPersonalPhotoChanged()
	 * @method \int remindActualPersonalPhoto()
	 * @method \int requirePersonalPhoto()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalPhoto()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalPhoto()
	 * @method \int fillPersonalPhoto()
	 * @method \string getPersonalNotes()
	 * @method \Craft\User\Application\Entity\JUser setPersonalNotes(\string|\Bitrix\Main\DB\SqlExpression $personalNotes)
	 * @method bool hasPersonalNotes()
	 * @method bool isPersonalNotesFilled()
	 * @method bool isPersonalNotesChanged()
	 * @method \string remindActualPersonalNotes()
	 * @method \string requirePersonalNotes()
	 * @method \Craft\User\Application\Entity\JUser resetPersonalNotes()
	 * @method \Craft\User\Application\Entity\JUser unsetPersonalNotes()
	 * @method \string fillPersonalNotes()
	 * @method \string getWorkCompany()
	 * @method \Craft\User\Application\Entity\JUser setWorkCompany(\string|\Bitrix\Main\DB\SqlExpression $workCompany)
	 * @method bool hasWorkCompany()
	 * @method bool isWorkCompanyFilled()
	 * @method bool isWorkCompanyChanged()
	 * @method \string remindActualWorkCompany()
	 * @method \string requireWorkCompany()
	 * @method \Craft\User\Application\Entity\JUser resetWorkCompany()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkCompany()
	 * @method \string fillWorkCompany()
	 * @method \string getWorkDepartment()
	 * @method \Craft\User\Application\Entity\JUser setWorkDepartment(\string|\Bitrix\Main\DB\SqlExpression $workDepartment)
	 * @method bool hasWorkDepartment()
	 * @method bool isWorkDepartmentFilled()
	 * @method bool isWorkDepartmentChanged()
	 * @method \string remindActualWorkDepartment()
	 * @method \string requireWorkDepartment()
	 * @method \Craft\User\Application\Entity\JUser resetWorkDepartment()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkDepartment()
	 * @method \string fillWorkDepartment()
	 * @method \string getWorkPhone()
	 * @method \Craft\User\Application\Entity\JUser setWorkPhone(\string|\Bitrix\Main\DB\SqlExpression $workPhone)
	 * @method bool hasWorkPhone()
	 * @method bool isWorkPhoneFilled()
	 * @method bool isWorkPhoneChanged()
	 * @method \string remindActualWorkPhone()
	 * @method \string requireWorkPhone()
	 * @method \Craft\User\Application\Entity\JUser resetWorkPhone()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkPhone()
	 * @method \string fillWorkPhone()
	 * @method \string getWorkPosition()
	 * @method \Craft\User\Application\Entity\JUser setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Craft\User\Application\Entity\JUser resetWorkPosition()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getWorkWww()
	 * @method \Craft\User\Application\Entity\JUser setWorkWww(\string|\Bitrix\Main\DB\SqlExpression $workWww)
	 * @method bool hasWorkWww()
	 * @method bool isWorkWwwFilled()
	 * @method bool isWorkWwwChanged()
	 * @method \string remindActualWorkWww()
	 * @method \string requireWorkWww()
	 * @method \Craft\User\Application\Entity\JUser resetWorkWww()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkWww()
	 * @method \string fillWorkWww()
	 * @method \string getWorkFax()
	 * @method \Craft\User\Application\Entity\JUser setWorkFax(\string|\Bitrix\Main\DB\SqlExpression $workFax)
	 * @method bool hasWorkFax()
	 * @method bool isWorkFaxFilled()
	 * @method bool isWorkFaxChanged()
	 * @method \string remindActualWorkFax()
	 * @method \string requireWorkFax()
	 * @method \Craft\User\Application\Entity\JUser resetWorkFax()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkFax()
	 * @method \string fillWorkFax()
	 * @method \string getWorkPager()
	 * @method \Craft\User\Application\Entity\JUser setWorkPager(\string|\Bitrix\Main\DB\SqlExpression $workPager)
	 * @method bool hasWorkPager()
	 * @method bool isWorkPagerFilled()
	 * @method bool isWorkPagerChanged()
	 * @method \string remindActualWorkPager()
	 * @method \string requireWorkPager()
	 * @method \Craft\User\Application\Entity\JUser resetWorkPager()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkPager()
	 * @method \string fillWorkPager()
	 * @method \string getWorkStreet()
	 * @method \Craft\User\Application\Entity\JUser setWorkStreet(\string|\Bitrix\Main\DB\SqlExpression $workStreet)
	 * @method bool hasWorkStreet()
	 * @method bool isWorkStreetFilled()
	 * @method bool isWorkStreetChanged()
	 * @method \string remindActualWorkStreet()
	 * @method \string requireWorkStreet()
	 * @method \Craft\User\Application\Entity\JUser resetWorkStreet()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkStreet()
	 * @method \string fillWorkStreet()
	 * @method \string getWorkMailbox()
	 * @method \Craft\User\Application\Entity\JUser setWorkMailbox(\string|\Bitrix\Main\DB\SqlExpression $workMailbox)
	 * @method bool hasWorkMailbox()
	 * @method bool isWorkMailboxFilled()
	 * @method bool isWorkMailboxChanged()
	 * @method \string remindActualWorkMailbox()
	 * @method \string requireWorkMailbox()
	 * @method \Craft\User\Application\Entity\JUser resetWorkMailbox()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkMailbox()
	 * @method \string fillWorkMailbox()
	 * @method \string getWorkCity()
	 * @method \Craft\User\Application\Entity\JUser setWorkCity(\string|\Bitrix\Main\DB\SqlExpression $workCity)
	 * @method bool hasWorkCity()
	 * @method bool isWorkCityFilled()
	 * @method bool isWorkCityChanged()
	 * @method \string remindActualWorkCity()
	 * @method \string requireWorkCity()
	 * @method \Craft\User\Application\Entity\JUser resetWorkCity()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkCity()
	 * @method \string fillWorkCity()
	 * @method \string getWorkState()
	 * @method \Craft\User\Application\Entity\JUser setWorkState(\string|\Bitrix\Main\DB\SqlExpression $workState)
	 * @method bool hasWorkState()
	 * @method bool isWorkStateFilled()
	 * @method bool isWorkStateChanged()
	 * @method \string remindActualWorkState()
	 * @method \string requireWorkState()
	 * @method \Craft\User\Application\Entity\JUser resetWorkState()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkState()
	 * @method \string fillWorkState()
	 * @method \string getWorkZip()
	 * @method \Craft\User\Application\Entity\JUser setWorkZip(\string|\Bitrix\Main\DB\SqlExpression $workZip)
	 * @method bool hasWorkZip()
	 * @method bool isWorkZipFilled()
	 * @method bool isWorkZipChanged()
	 * @method \string remindActualWorkZip()
	 * @method \string requireWorkZip()
	 * @method \Craft\User\Application\Entity\JUser resetWorkZip()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkZip()
	 * @method \string fillWorkZip()
	 * @method \string getWorkCountry()
	 * @method \Craft\User\Application\Entity\JUser setWorkCountry(\string|\Bitrix\Main\DB\SqlExpression $workCountry)
	 * @method bool hasWorkCountry()
	 * @method bool isWorkCountryFilled()
	 * @method bool isWorkCountryChanged()
	 * @method \string remindActualWorkCountry()
	 * @method \string requireWorkCountry()
	 * @method \Craft\User\Application\Entity\JUser resetWorkCountry()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkCountry()
	 * @method \string fillWorkCountry()
	 * @method \string getWorkProfile()
	 * @method \Craft\User\Application\Entity\JUser setWorkProfile(\string|\Bitrix\Main\DB\SqlExpression $workProfile)
	 * @method bool hasWorkProfile()
	 * @method bool isWorkProfileFilled()
	 * @method bool isWorkProfileChanged()
	 * @method \string remindActualWorkProfile()
	 * @method \string requireWorkProfile()
	 * @method \Craft\User\Application\Entity\JUser resetWorkProfile()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkProfile()
	 * @method \string fillWorkProfile()
	 * @method \int getWorkLogo()
	 * @method \Craft\User\Application\Entity\JUser setWorkLogo(\int|\Bitrix\Main\DB\SqlExpression $workLogo)
	 * @method bool hasWorkLogo()
	 * @method bool isWorkLogoFilled()
	 * @method bool isWorkLogoChanged()
	 * @method \int remindActualWorkLogo()
	 * @method \int requireWorkLogo()
	 * @method \Craft\User\Application\Entity\JUser resetWorkLogo()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkLogo()
	 * @method \int fillWorkLogo()
	 * @method \string getWorkNotes()
	 * @method \Craft\User\Application\Entity\JUser setWorkNotes(\string|\Bitrix\Main\DB\SqlExpression $workNotes)
	 * @method bool hasWorkNotes()
	 * @method bool isWorkNotesFilled()
	 * @method bool isWorkNotesChanged()
	 * @method \string remindActualWorkNotes()
	 * @method \string requireWorkNotes()
	 * @method \Craft\User\Application\Entity\JUser resetWorkNotes()
	 * @method \Craft\User\Application\Entity\JUser unsetWorkNotes()
	 * @method \string fillWorkNotes()
	 * @method \string getAdminNotes()
	 * @method \Craft\User\Application\Entity\JUser setAdminNotes(\string|\Bitrix\Main\DB\SqlExpression $adminNotes)
	 * @method bool hasAdminNotes()
	 * @method bool isAdminNotesFilled()
	 * @method bool isAdminNotesChanged()
	 * @method \string remindActualAdminNotes()
	 * @method \string requireAdminNotes()
	 * @method \Craft\User\Application\Entity\JUser resetAdminNotes()
	 * @method \Craft\User\Application\Entity\JUser unsetAdminNotes()
	 * @method \string fillAdminNotes()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetShortName()
	 * @method \string fillShortName()
	 * @method \boolean getIsOnline()
	 * @method \boolean remindActualIsOnline()
	 * @method \boolean requireIsOnline()
	 * @method bool hasIsOnline()
	 * @method bool isIsOnlineFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetIsOnline()
	 * @method \boolean fillIsOnline()
	 * @method \boolean getIsRealUser()
	 * @method \boolean remindActualIsRealUser()
	 * @method \boolean requireIsRealUser()
	 * @method bool hasIsRealUser()
	 * @method bool isIsRealUserFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetIsRealUser()
	 * @method \boolean fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex getIndex()
	 * @method \Bitrix\Main\EO_UserIndex remindActualIndex()
	 * @method \Bitrix\Main\EO_UserIndex requireIndex()
	 * @method \Craft\User\Application\Entity\JUser setIndex(\Bitrix\Main\EO_UserIndex $object)
	 * @method \Craft\User\Application\Entity\JUser resetIndex()
	 * @method \Craft\User\Application\Entity\JUser unsetIndex()
	 * @method bool hasIndex()
	 * @method bool isIndexFilled()
	 * @method bool isIndexChanged()
	 * @method \Bitrix\Main\EO_UserIndex fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter getCounter()
	 * @method \Bitrix\Main\EO_UserCounter remindActualCounter()
	 * @method \Bitrix\Main\EO_UserCounter requireCounter()
	 * @method \Craft\User\Application\Entity\JUser setCounter(\Bitrix\Main\EO_UserCounter $object)
	 * @method \Craft\User\Application\Entity\JUser resetCounter()
	 * @method \Craft\User\Application\Entity\JUser unsetCounter()
	 * @method bool hasCounter()
	 * @method bool isCounterFilled()
	 * @method bool isCounterChanged()
	 * @method \Bitrix\Main\EO_UserCounter fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth getPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth remindActualPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth requirePhoneAuth()
	 * @method \Craft\User\Application\Entity\JUser setPhoneAuth(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method \Craft\User\Application\Entity\JUser resetPhoneAuth()
	 * @method \Craft\User\Application\Entity\JUser unsetPhoneAuth()
	 * @method bool hasPhoneAuth()
	 * @method bool isPhoneAuthFilled()
	 * @method bool isPhoneAuthChanged()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection requireGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method bool hasGroups()
	 * @method bool isGroupsFilled()
	 * @method bool isGroupsChanged()
	 * @method void addToGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeFromGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeAllGroups()
	 * @method \Craft\User\Application\Entity\JUser resetGroups()
	 * @method \Craft\User\Application\Entity\JUser unsetGroups()
	 * @method \Bitrix\Main\Localization\EO_Language getActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language remindActualActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language requireActiveLanguage()
	 * @method \Craft\User\Application\Entity\JUser setActiveLanguage(\Bitrix\Main\Localization\EO_Language $object)
	 * @method \Craft\User\Application\Entity\JUser resetActiveLanguage()
	 * @method \Craft\User\Application\Entity\JUser unsetActiveLanguage()
	 * @method bool hasActiveLanguage()
	 * @method bool isActiveLanguageFilled()
	 * @method bool isActiveLanguageChanged()
	 * @method \Bitrix\Main\Localization\EO_Language fillActiveLanguage()
	 * @method \string getNotificationLanguageId()
	 * @method \string remindActualNotificationLanguageId()
	 * @method \string requireNotificationLanguageId()
	 * @method bool hasNotificationLanguageId()
	 * @method bool isNotificationLanguageIdFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetNotificationLanguageId()
	 * @method \string fillNotificationLanguageId()
	 * @method \Craft\User\Application\Entity\EO_JUserUts getUtsObject()
	 * @method \Craft\User\Application\Entity\EO_JUserUts remindActualUtsObject()
	 * @method \Craft\User\Application\Entity\EO_JUserUts requireUtsObject()
	 * @method \Craft\User\Application\Entity\JUser setUtsObject(\Craft\User\Application\Entity\EO_JUserUts $object)
	 * @method \Craft\User\Application\Entity\JUser resetUtsObject()
	 * @method \Craft\User\Application\Entity\JUser unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Craft\User\Application\Entity\EO_JUserUts fillUtsObject()
	 * @method \string getUfInn()
	 * @method \string remindActualUfInn()
	 * @method \string requireUfInn()
	 * @method bool hasUfInn()
	 * @method bool isUfInnFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfInn()
	 * @method \string fillUfInn()
	 * @method \Craft\User\Application\Entity\JUser setUfInn(\string $ufInn)
	 * @method bool isUfInnChanged()
	 * @method \string getUfOgrn()
	 * @method \string remindActualUfOgrn()
	 * @method \string requireUfOgrn()
	 * @method bool hasUfOgrn()
	 * @method bool isUfOgrnFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfOgrn()
	 * @method \string fillUfOgrn()
	 * @method \Craft\User\Application\Entity\JUser setUfOgrn(\string $ufOgrn)
	 * @method bool isUfOgrnChanged()
	 * @method \string getUfCorrAcc()
	 * @method \string remindActualUfCorrAcc()
	 * @method \string requireUfCorrAcc()
	 * @method bool hasUfCorrAcc()
	 * @method bool isUfCorrAccFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfCorrAcc()
	 * @method \string fillUfCorrAcc()
	 * @method \Craft\User\Application\Entity\JUser setUfCorrAcc(\string $ufCorrAcc)
	 * @method bool isUfCorrAccChanged()
	 * @method \string getUfCurrAcc()
	 * @method \string remindActualUfCurrAcc()
	 * @method \string requireUfCurrAcc()
	 * @method bool hasUfCurrAcc()
	 * @method bool isUfCurrAccFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfCurrAcc()
	 * @method \string fillUfCurrAcc()
	 * @method \Craft\User\Application\Entity\JUser setUfCurrAcc(\string $ufCurrAcc)
	 * @method bool isUfCurrAccChanged()
	 * @method \string getUfKpp()
	 * @method \string remindActualUfKpp()
	 * @method \string requireUfKpp()
	 * @method bool hasUfKpp()
	 * @method bool isUfKppFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfKpp()
	 * @method \string fillUfKpp()
	 * @method \Craft\User\Application\Entity\JUser setUfKpp(\string $ufKpp)
	 * @method bool isUfKppChanged()
	 * @method \string getUfBik()
	 * @method \string remindActualUfBik()
	 * @method \string requireUfBik()
	 * @method bool hasUfBik()
	 * @method bool isUfBikFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfBik()
	 * @method \string fillUfBik()
	 * @method \Craft\User\Application\Entity\JUser setUfBik(\string $ufBik)
	 * @method bool isUfBikChanged()
	 * @method \string getUfPostAddress()
	 * @method \string remindActualUfPostAddress()
	 * @method \string requireUfPostAddress()
	 * @method bool hasUfPostAddress()
	 * @method bool isUfPostAddressFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfPostAddress()
	 * @method \string fillUfPostAddress()
	 * @method \Craft\User\Application\Entity\JUser setUfPostAddress(\string $ufPostAddress)
	 * @method bool isUfPostAddressChanged()
	 * @method \string getUfLegalAddress()
	 * @method \string remindActualUfLegalAddress()
	 * @method \string requireUfLegalAddress()
	 * @method bool hasUfLegalAddress()
	 * @method bool isUfLegalAddressFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfLegalAddress()
	 * @method \string fillUfLegalAddress()
	 * @method \Craft\User\Application\Entity\JUser setUfLegalAddress(\string $ufLegalAddress)
	 * @method bool isUfLegalAddressChanged()
	 * @method \string getUfBankName()
	 * @method \string remindActualUfBankName()
	 * @method \string requireUfBankName()
	 * @method bool hasUfBankName()
	 * @method bool isUfBankNameFilled()
	 * @method \Craft\User\Application\Entity\JUser unsetUfBankName()
	 * @method \string fillUfBankName()
	 * @method \Craft\User\Application\Entity\JUser setUfBankName(\string $ufBankName)
	 * @method bool isUfBankNameChanged()
	 * @method \Craft\User\Application\Entity\EO_JUserUts getUtsObjectInner()
	 * @method \Craft\User\Application\Entity\EO_JUserUts remindActualUtsObjectInner()
	 * @method \Craft\User\Application\Entity\EO_JUserUts requireUtsObjectInner()
	 * @method \Craft\User\Application\Entity\JUser setUtsObjectInner(\Craft\User\Application\Entity\EO_JUserUts $object)
	 * @method \Craft\User\Application\Entity\JUser resetUtsObjectInner()
	 * @method \Craft\User\Application\Entity\JUser unsetUtsObjectInner()
	 * @method bool hasUtsObjectInner()
	 * @method bool isUtsObjectInnerFilled()
	 * @method bool isUtsObjectInnerChanged()
	 * @method \Craft\User\Application\Entity\EO_JUserUts fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\User\Application\Entity\JUser set($fieldName, $value)
	 * @method \Craft\User\Application\Entity\JUser reset($fieldName)
	 * @method \Craft\User\Application\Entity\JUser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\User\Application\Entity\JUser wakeUp($data)
	 */
	class EO_JUser {
		/* @var \Craft\User\Application\Entity\JUserTable */
		static public $dataClass = '\Craft\User\Application\Entity\JUserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\User\Application\Entity {
	/**
	 * JUserCollection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getBlockedList()
	 * @method \boolean[] fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegisterList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastActivityDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getExternalAuthIdList()
	 * @method \string[] fillExternalAuthId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getTimeZoneList()
	 * @method \string[] fillTimeZone()
	 * @method \int[] getTimeZoneOffsetList()
	 * @method \int[] fillTimeZoneOffset()
	 * @method \string[] getPersonalProfessionList()
	 * @method \string[] fillPersonalProfession()
	 * @method \string[] getPersonalPhoneList()
	 * @method \string[] fillPersonalPhone()
	 * @method \string[] getPersonalMobileList()
	 * @method \string[] fillPersonalMobile()
	 * @method \string[] getPersonalWwwList()
	 * @method \string[] fillPersonalWww()
	 * @method \string[] getPersonalIcqList()
	 * @method \string[] fillPersonalIcq()
	 * @method \string[] getPersonalFaxList()
	 * @method \string[] fillPersonalFax()
	 * @method \string[] getPersonalPagerList()
	 * @method \string[] fillPersonalPager()
	 * @method \string[] getPersonalStreetList()
	 * @method \string[] fillPersonalStreet()
	 * @method \string[] getPersonalMailboxList()
	 * @method \string[] fillPersonalMailbox()
	 * @method \string[] getPersonalCityList()
	 * @method \string[] fillPersonalCity()
	 * @method \string[] getPersonalStateList()
	 * @method \string[] fillPersonalState()
	 * @method \string[] getPersonalZipList()
	 * @method \string[] fillPersonalZip()
	 * @method \string[] getPersonalCountryList()
	 * @method \string[] fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date[] getPersonalBirthdayList()
	 * @method \Bitrix\Main\Type\Date[] fillPersonalBirthday()
	 * @method \string[] getPersonalGenderList()
	 * @method \string[] fillPersonalGender()
	 * @method \int[] getPersonalPhotoList()
	 * @method \int[] fillPersonalPhoto()
	 * @method \string[] getPersonalNotesList()
	 * @method \string[] fillPersonalNotes()
	 * @method \string[] getWorkCompanyList()
	 * @method \string[] fillWorkCompany()
	 * @method \string[] getWorkDepartmentList()
	 * @method \string[] fillWorkDepartment()
	 * @method \string[] getWorkPhoneList()
	 * @method \string[] fillWorkPhone()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getWorkWwwList()
	 * @method \string[] fillWorkWww()
	 * @method \string[] getWorkFaxList()
	 * @method \string[] fillWorkFax()
	 * @method \string[] getWorkPagerList()
	 * @method \string[] fillWorkPager()
	 * @method \string[] getWorkStreetList()
	 * @method \string[] fillWorkStreet()
	 * @method \string[] getWorkMailboxList()
	 * @method \string[] fillWorkMailbox()
	 * @method \string[] getWorkCityList()
	 * @method \string[] fillWorkCity()
	 * @method \string[] getWorkStateList()
	 * @method \string[] fillWorkState()
	 * @method \string[] getWorkZipList()
	 * @method \string[] fillWorkZip()
	 * @method \string[] getWorkCountryList()
	 * @method \string[] fillWorkCountry()
	 * @method \string[] getWorkProfileList()
	 * @method \string[] fillWorkProfile()
	 * @method \int[] getWorkLogoList()
	 * @method \int[] fillWorkLogo()
	 * @method \string[] getWorkNotesList()
	 * @method \string[] fillWorkNotes()
	 * @method \string[] getAdminNotesList()
	 * @method \string[] fillAdminNotes()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \boolean[] getIsOnlineList()
	 * @method \boolean[] fillIsOnline()
	 * @method \boolean[] getIsRealUserList()
	 * @method \boolean[] fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex[] getIndexList()
	 * @method \Craft\User\Application\Entity\JUserCollection getIndexCollection()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter[] getCounterList()
	 * @method \Craft\User\Application\Entity\JUserCollection getCounterCollection()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getPhoneAuthList()
	 * @method \Craft\User\Application\Entity\JUserCollection getPhoneAuthCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection[] getGroupsList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupsCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method \Bitrix\Main\Localization\EO_Language[] getActiveLanguageList()
	 * @method \Craft\User\Application\Entity\JUserCollection getActiveLanguageCollection()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fillActiveLanguage()
	 * @method \string[] getNotificationLanguageIdList()
	 * @method \string[] fillNotificationLanguageId()
	 * @method \Craft\User\Application\Entity\EO_JUserUts[] getUtsObjectList()
	 * @method \Craft\User\Application\Entity\JUserCollection getUtsObjectCollection()
	 * @method \Craft\User\Application\Entity\EO_JUserUts_Collection fillUtsObject()
	 * @method \string[] getUfInnList()
	 * @method \string[] fillUfInn()
	 * @method \string[] getUfOgrnList()
	 * @method \string[] fillUfOgrn()
	 * @method \string[] getUfCorrAccList()
	 * @method \string[] fillUfCorrAcc()
	 * @method \string[] getUfCurrAccList()
	 * @method \string[] fillUfCurrAcc()
	 * @method \string[] getUfKppList()
	 * @method \string[] fillUfKpp()
	 * @method \string[] getUfBikList()
	 * @method \string[] fillUfBik()
	 * @method \string[] getUfPostAddressList()
	 * @method \string[] fillUfPostAddress()
	 * @method \string[] getUfLegalAddressList()
	 * @method \string[] fillUfLegalAddress()
	 * @method \string[] getUfBankNameList()
	 * @method \string[] fillUfBankName()
	 * @method \Craft\User\Application\Entity\EO_JUserUts[] getUtsObjectInnerList()
	 * @method \Craft\User\Application\Entity\JUserCollection getUtsObjectInnerCollection()
	 * @method \Craft\User\Application\Entity\EO_JUserUts_Collection fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\User\Application\Entity\JUser $object)
	 * @method bool has(\Craft\User\Application\Entity\JUser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\User\Application\Entity\JUser getByPrimary($primary)
	 * @method \Craft\User\Application\Entity\JUser[] getAll()
	 * @method bool remove(\Craft\User\Application\Entity\JUser $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\User\Application\Entity\JUserCollection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\User\Application\Entity\JUser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\User\Application\Entity\JUserCollection merge(?\Craft\User\Application\Entity\JUserCollection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_JUser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\User\Application\Entity\JUserTable */
		static public $dataClass = '\Craft\User\Application\Entity\JUserTable';
	}
}
namespace Craft\User\Application\Entity {
	/**
	 * @method static EO_JUser_Query query()
	 * @method static EO_JUser_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_JUser_Result getById($id)
	 * @method static EO_JUser_Result getList(array $parameters = [])
	 * @method static EO_JUser_Entity getEntity()
	 * @method static \Craft\User\Application\Entity\JUser createObject($setDefaultValues = true)
	 * @method static \Craft\User\Application\Entity\JUserCollection createCollection()
	 * @method static \Craft\User\Application\Entity\JUser wakeUpObject($row)
	 * @method static \Craft\User\Application\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class JUserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_JUser_Result exec()
	 * @method \Craft\User\Application\Entity\JUser fetchObject()
	 * @method \Craft\User\Application\Entity\JUserCollection fetchCollection()
	 */
	class EO_JUser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\User\Application\Entity\JUser fetchObject()
	 * @method \Craft\User\Application\Entity\JUserCollection fetchCollection()
	 */
	class EO_JUser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\User\Application\Entity\JUser createObject($setDefaultValues = true)
	 * @method \Craft\User\Application\Entity\JUserCollection createCollection()
	 * @method \Craft\User\Application\Entity\JUser wakeUpObject($row)
	 * @method \Craft\User\Application\Entity\JUserCollection wakeUpCollection($rows)
	 */
	class EO_JUser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\User\Application\Entity\JUserSocialIdentityTable */
namespace Craft\User\Application\Entity {
	/**
	 * EO_JUserSocialIdentity
	 * @see \Craft\User\Application\Entity\JUserSocialIdentityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity resetUserId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getIdentityId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity setIdentityId(\string|\Bitrix\Main\DB\SqlExpression $identityId)
	 * @method bool hasIdentityId()
	 * @method bool isIdentityIdFilled()
	 * @method bool isIdentityIdChanged()
	 * @method \string remindActualIdentityId()
	 * @method \string requireIdentityId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity resetIdentityId()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity unsetIdentityId()
	 * @method \string fillIdentityId()
	 * @method \string getSocial()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity setSocial(\string|\Bitrix\Main\DB\SqlExpression $social)
	 * @method bool hasSocial()
	 * @method bool isSocialFilled()
	 * @method bool isSocialChanged()
	 * @method \string remindActualSocial()
	 * @method \string requireSocial()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity resetSocial()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity unsetSocial()
	 * @method \string fillSocial()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity resetCreatedAt()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity set($fieldName, $value)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity reset($fieldName)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity wakeUp($data)
	 */
	class EO_JUserSocialIdentity {
		/* @var \Craft\User\Application\Entity\JUserSocialIdentityTable */
		static public $dataClass = '\Craft\User\Application\Entity\JUserSocialIdentityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\User\Application\Entity {
	/**
	 * EO_JUserSocialIdentity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getIdentityIdList()
	 * @method \string[] fillIdentityId()
	 * @method \string[] getSocialList()
	 * @method \string[] fillSocial()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\User\Application\Entity\EO_JUserSocialIdentity $object)
	 * @method bool has(\Craft\User\Application\Entity\EO_JUserSocialIdentity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity getByPrimary($primary)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity[] getAll()
	 * @method bool remove(\Craft\User\Application\Entity\EO_JUserSocialIdentity $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection merge(?\Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_JUserSocialIdentity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\User\Application\Entity\JUserSocialIdentityTable */
		static public $dataClass = '\Craft\User\Application\Entity\JUserSocialIdentityTable';
	}
}
namespace Craft\User\Application\Entity {
	/**
	 * @method static EO_JUserSocialIdentity_Query query()
	 * @method static EO_JUserSocialIdentity_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_JUserSocialIdentity_Result getById($id)
	 * @method static EO_JUserSocialIdentity_Result getList(array $parameters = [])
	 * @method static EO_JUserSocialIdentity_Entity getEntity()
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity createObject($setDefaultValues = true)
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection createCollection()
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity wakeUpObject($row)
	 * @method static \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection wakeUpCollection($rows)
	 */
	class JUserSocialIdentityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_JUserSocialIdentity_Result exec()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity fetchObject()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection fetchCollection()
	 */
	class EO_JUserSocialIdentity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity fetchObject()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection fetchCollection()
	 */
	class EO_JUserSocialIdentity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity createObject($setDefaultValues = true)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection createCollection()
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity wakeUpObject($row)
	 * @method \Craft\User\Application\Entity\EO_JUserSocialIdentity_Collection wakeUpCollection($rows)
	 */
	class EO_JUserSocialIdentity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\Model\CraftUserTable */
namespace Craft\Model {
	/**
	 * CraftUser
	 * @see \Craft\Model\CraftUserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\Model\CraftUser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLogin()
	 * @method \Craft\Model\CraftUser setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Craft\Model\CraftUser resetLogin()
	 * @method \Craft\Model\CraftUser unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Craft\Model\CraftUser setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Craft\Model\CraftUser resetPassword()
	 * @method \Craft\Model\CraftUser unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getEmail()
	 * @method \Craft\Model\CraftUser setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Craft\Model\CraftUser resetEmail()
	 * @method \Craft\Model\CraftUser unsetEmail()
	 * @method \string fillEmail()
	 * @method \boolean getActive()
	 * @method \Craft\Model\CraftUser setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\Model\CraftUser resetActive()
	 * @method \Craft\Model\CraftUser unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getBlocked()
	 * @method \Craft\Model\CraftUser setBlocked(\boolean|\Bitrix\Main\DB\SqlExpression $blocked)
	 * @method bool hasBlocked()
	 * @method bool isBlockedFilled()
	 * @method bool isBlockedChanged()
	 * @method \boolean remindActualBlocked()
	 * @method \boolean requireBlocked()
	 * @method \Craft\Model\CraftUser resetBlocked()
	 * @method \Craft\Model\CraftUser unsetBlocked()
	 * @method \boolean fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime getDateRegister()
	 * @method \Craft\Model\CraftUser setDateRegister(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRegister)
	 * @method bool hasDateRegister()
	 * @method bool isDateRegisterFilled()
	 * @method bool isDateRegisterChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegister()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegister()
	 * @method \Craft\Model\CraftUser resetDateRegister()
	 * @method \Craft\Model\CraftUser unsetDateRegister()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime getDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegShort()
	 * @method bool hasDateRegShort()
	 * @method bool isDateRegShortFilled()
	 * @method \Craft\Model\CraftUser unsetDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime getLastLogin()
	 * @method \Craft\Model\CraftUser setLastLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastLogin)
	 * @method bool hasLastLogin()
	 * @method bool isLastLoginFilled()
	 * @method bool isLastLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLogin()
	 * @method \Bitrix\Main\Type\DateTime requireLastLogin()
	 * @method \Craft\Model\CraftUser resetLastLogin()
	 * @method \Craft\Model\CraftUser unsetLastLogin()
	 * @method \Bitrix\Main\Type\DateTime fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime getLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastLoginShort()
	 * @method bool hasLastLoginShort()
	 * @method bool isLastLoginShortFilled()
	 * @method \Craft\Model\CraftUser unsetLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime getLastActivityDate()
	 * @method \Craft\Model\CraftUser setLastActivityDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastActivityDate)
	 * @method bool hasLastActivityDate()
	 * @method bool isLastActivityDateFilled()
	 * @method bool isLastActivityDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastActivityDate()
	 * @method \Craft\Model\CraftUser resetLastActivityDate()
	 * @method \Craft\Model\CraftUser unsetLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Craft\Model\CraftUser setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Craft\Model\CraftUser resetTimestampX()
	 * @method \Craft\Model\CraftUser unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getName()
	 * @method \Craft\Model\CraftUser setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\Model\CraftUser resetName()
	 * @method \Craft\Model\CraftUser unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Craft\Model\CraftUser setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Craft\Model\CraftUser resetSecondName()
	 * @method \Craft\Model\CraftUser unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Craft\Model\CraftUser setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Craft\Model\CraftUser resetLastName()
	 * @method \Craft\Model\CraftUser unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getTitle()
	 * @method \Craft\Model\CraftUser setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Craft\Model\CraftUser resetTitle()
	 * @method \Craft\Model\CraftUser unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getExternalAuthId()
	 * @method \Craft\Model\CraftUser setExternalAuthId(\string|\Bitrix\Main\DB\SqlExpression $externalAuthId)
	 * @method bool hasExternalAuthId()
	 * @method bool isExternalAuthIdFilled()
	 * @method bool isExternalAuthIdChanged()
	 * @method \string remindActualExternalAuthId()
	 * @method \string requireExternalAuthId()
	 * @method \Craft\Model\CraftUser resetExternalAuthId()
	 * @method \Craft\Model\CraftUser unsetExternalAuthId()
	 * @method \string fillExternalAuthId()
	 * @method \string getXmlId()
	 * @method \Craft\Model\CraftUser setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Craft\Model\CraftUser resetXmlId()
	 * @method \Craft\Model\CraftUser unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getBxUserId()
	 * @method \Craft\Model\CraftUser setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Craft\Model\CraftUser resetBxUserId()
	 * @method \Craft\Model\CraftUser unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getConfirmCode()
	 * @method \Craft\Model\CraftUser setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Craft\Model\CraftUser resetConfirmCode()
	 * @method \Craft\Model\CraftUser unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \string getLid()
	 * @method \Craft\Model\CraftUser setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Craft\Model\CraftUser resetLid()
	 * @method \Craft\Model\CraftUser unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \Craft\Model\CraftUser setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Craft\Model\CraftUser resetLanguageId()
	 * @method \Craft\Model\CraftUser unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getTimeZone()
	 * @method \Craft\Model\CraftUser setTimeZone(\string|\Bitrix\Main\DB\SqlExpression $timeZone)
	 * @method bool hasTimeZone()
	 * @method bool isTimeZoneFilled()
	 * @method bool isTimeZoneChanged()
	 * @method \string remindActualTimeZone()
	 * @method \string requireTimeZone()
	 * @method \Craft\Model\CraftUser resetTimeZone()
	 * @method \Craft\Model\CraftUser unsetTimeZone()
	 * @method \string fillTimeZone()
	 * @method \int getTimeZoneOffset()
	 * @method \Craft\Model\CraftUser setTimeZoneOffset(\int|\Bitrix\Main\DB\SqlExpression $timeZoneOffset)
	 * @method bool hasTimeZoneOffset()
	 * @method bool isTimeZoneOffsetFilled()
	 * @method bool isTimeZoneOffsetChanged()
	 * @method \int remindActualTimeZoneOffset()
	 * @method \int requireTimeZoneOffset()
	 * @method \Craft\Model\CraftUser resetTimeZoneOffset()
	 * @method \Craft\Model\CraftUser unsetTimeZoneOffset()
	 * @method \int fillTimeZoneOffset()
	 * @method \string getPersonalProfession()
	 * @method \Craft\Model\CraftUser setPersonalProfession(\string|\Bitrix\Main\DB\SqlExpression $personalProfession)
	 * @method bool hasPersonalProfession()
	 * @method bool isPersonalProfessionFilled()
	 * @method bool isPersonalProfessionChanged()
	 * @method \string remindActualPersonalProfession()
	 * @method \string requirePersonalProfession()
	 * @method \Craft\Model\CraftUser resetPersonalProfession()
	 * @method \Craft\Model\CraftUser unsetPersonalProfession()
	 * @method \string fillPersonalProfession()
	 * @method \string getPersonalPhone()
	 * @method \Craft\Model\CraftUser setPersonalPhone(\string|\Bitrix\Main\DB\SqlExpression $personalPhone)
	 * @method bool hasPersonalPhone()
	 * @method bool isPersonalPhoneFilled()
	 * @method bool isPersonalPhoneChanged()
	 * @method \string remindActualPersonalPhone()
	 * @method \string requirePersonalPhone()
	 * @method \Craft\Model\CraftUser resetPersonalPhone()
	 * @method \Craft\Model\CraftUser unsetPersonalPhone()
	 * @method \string fillPersonalPhone()
	 * @method \string getPersonalMobile()
	 * @method \Craft\Model\CraftUser setPersonalMobile(\string|\Bitrix\Main\DB\SqlExpression $personalMobile)
	 * @method bool hasPersonalMobile()
	 * @method bool isPersonalMobileFilled()
	 * @method bool isPersonalMobileChanged()
	 * @method \string remindActualPersonalMobile()
	 * @method \string requirePersonalMobile()
	 * @method \Craft\Model\CraftUser resetPersonalMobile()
	 * @method \Craft\Model\CraftUser unsetPersonalMobile()
	 * @method \string fillPersonalMobile()
	 * @method \string getPersonalWww()
	 * @method \Craft\Model\CraftUser setPersonalWww(\string|\Bitrix\Main\DB\SqlExpression $personalWww)
	 * @method bool hasPersonalWww()
	 * @method bool isPersonalWwwFilled()
	 * @method bool isPersonalWwwChanged()
	 * @method \string remindActualPersonalWww()
	 * @method \string requirePersonalWww()
	 * @method \Craft\Model\CraftUser resetPersonalWww()
	 * @method \Craft\Model\CraftUser unsetPersonalWww()
	 * @method \string fillPersonalWww()
	 * @method \string getPersonalIcq()
	 * @method \Craft\Model\CraftUser setPersonalIcq(\string|\Bitrix\Main\DB\SqlExpression $personalIcq)
	 * @method bool hasPersonalIcq()
	 * @method bool isPersonalIcqFilled()
	 * @method bool isPersonalIcqChanged()
	 * @method \string remindActualPersonalIcq()
	 * @method \string requirePersonalIcq()
	 * @method \Craft\Model\CraftUser resetPersonalIcq()
	 * @method \Craft\Model\CraftUser unsetPersonalIcq()
	 * @method \string fillPersonalIcq()
	 * @method \string getPersonalFax()
	 * @method \Craft\Model\CraftUser setPersonalFax(\string|\Bitrix\Main\DB\SqlExpression $personalFax)
	 * @method bool hasPersonalFax()
	 * @method bool isPersonalFaxFilled()
	 * @method bool isPersonalFaxChanged()
	 * @method \string remindActualPersonalFax()
	 * @method \string requirePersonalFax()
	 * @method \Craft\Model\CraftUser resetPersonalFax()
	 * @method \Craft\Model\CraftUser unsetPersonalFax()
	 * @method \string fillPersonalFax()
	 * @method \string getPersonalPager()
	 * @method \Craft\Model\CraftUser setPersonalPager(\string|\Bitrix\Main\DB\SqlExpression $personalPager)
	 * @method bool hasPersonalPager()
	 * @method bool isPersonalPagerFilled()
	 * @method bool isPersonalPagerChanged()
	 * @method \string remindActualPersonalPager()
	 * @method \string requirePersonalPager()
	 * @method \Craft\Model\CraftUser resetPersonalPager()
	 * @method \Craft\Model\CraftUser unsetPersonalPager()
	 * @method \string fillPersonalPager()
	 * @method \string getPersonalStreet()
	 * @method \Craft\Model\CraftUser setPersonalStreet(\string|\Bitrix\Main\DB\SqlExpression $personalStreet)
	 * @method bool hasPersonalStreet()
	 * @method bool isPersonalStreetFilled()
	 * @method bool isPersonalStreetChanged()
	 * @method \string remindActualPersonalStreet()
	 * @method \string requirePersonalStreet()
	 * @method \Craft\Model\CraftUser resetPersonalStreet()
	 * @method \Craft\Model\CraftUser unsetPersonalStreet()
	 * @method \string fillPersonalStreet()
	 * @method \string getPersonalMailbox()
	 * @method \Craft\Model\CraftUser setPersonalMailbox(\string|\Bitrix\Main\DB\SqlExpression $personalMailbox)
	 * @method bool hasPersonalMailbox()
	 * @method bool isPersonalMailboxFilled()
	 * @method bool isPersonalMailboxChanged()
	 * @method \string remindActualPersonalMailbox()
	 * @method \string requirePersonalMailbox()
	 * @method \Craft\Model\CraftUser resetPersonalMailbox()
	 * @method \Craft\Model\CraftUser unsetPersonalMailbox()
	 * @method \string fillPersonalMailbox()
	 * @method \string getPersonalCity()
	 * @method \Craft\Model\CraftUser setPersonalCity(\string|\Bitrix\Main\DB\SqlExpression $personalCity)
	 * @method bool hasPersonalCity()
	 * @method bool isPersonalCityFilled()
	 * @method bool isPersonalCityChanged()
	 * @method \string remindActualPersonalCity()
	 * @method \string requirePersonalCity()
	 * @method \Craft\Model\CraftUser resetPersonalCity()
	 * @method \Craft\Model\CraftUser unsetPersonalCity()
	 * @method \string fillPersonalCity()
	 * @method \string getPersonalState()
	 * @method \Craft\Model\CraftUser setPersonalState(\string|\Bitrix\Main\DB\SqlExpression $personalState)
	 * @method bool hasPersonalState()
	 * @method bool isPersonalStateFilled()
	 * @method bool isPersonalStateChanged()
	 * @method \string remindActualPersonalState()
	 * @method \string requirePersonalState()
	 * @method \Craft\Model\CraftUser resetPersonalState()
	 * @method \Craft\Model\CraftUser unsetPersonalState()
	 * @method \string fillPersonalState()
	 * @method \string getPersonalZip()
	 * @method \Craft\Model\CraftUser setPersonalZip(\string|\Bitrix\Main\DB\SqlExpression $personalZip)
	 * @method bool hasPersonalZip()
	 * @method bool isPersonalZipFilled()
	 * @method bool isPersonalZipChanged()
	 * @method \string remindActualPersonalZip()
	 * @method \string requirePersonalZip()
	 * @method \Craft\Model\CraftUser resetPersonalZip()
	 * @method \Craft\Model\CraftUser unsetPersonalZip()
	 * @method \string fillPersonalZip()
	 * @method \string getPersonalCountry()
	 * @method \Craft\Model\CraftUser setPersonalCountry(\string|\Bitrix\Main\DB\SqlExpression $personalCountry)
	 * @method bool hasPersonalCountry()
	 * @method bool isPersonalCountryFilled()
	 * @method bool isPersonalCountryChanged()
	 * @method \string remindActualPersonalCountry()
	 * @method \string requirePersonalCountry()
	 * @method \Craft\Model\CraftUser resetPersonalCountry()
	 * @method \Craft\Model\CraftUser unsetPersonalCountry()
	 * @method \string fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date getPersonalBirthday()
	 * @method \Craft\Model\CraftUser setPersonalBirthday(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $personalBirthday)
	 * @method bool hasPersonalBirthday()
	 * @method bool isPersonalBirthdayFilled()
	 * @method bool isPersonalBirthdayChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date requirePersonalBirthday()
	 * @method \Craft\Model\CraftUser resetPersonalBirthday()
	 * @method \Craft\Model\CraftUser unsetPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date fillPersonalBirthday()
	 * @method \string getPersonalGender()
	 * @method \Craft\Model\CraftUser setPersonalGender(\string|\Bitrix\Main\DB\SqlExpression $personalGender)
	 * @method bool hasPersonalGender()
	 * @method bool isPersonalGenderFilled()
	 * @method bool isPersonalGenderChanged()
	 * @method \string remindActualPersonalGender()
	 * @method \string requirePersonalGender()
	 * @method \Craft\Model\CraftUser resetPersonalGender()
	 * @method \Craft\Model\CraftUser unsetPersonalGender()
	 * @method \string fillPersonalGender()
	 * @method \int getPersonalPhoto()
	 * @method \Craft\Model\CraftUser setPersonalPhoto(\int|\Bitrix\Main\DB\SqlExpression $personalPhoto)
	 * @method bool hasPersonalPhoto()
	 * @method bool isPersonalPhotoFilled()
	 * @method bool isPersonalPhotoChanged()
	 * @method \int remindActualPersonalPhoto()
	 * @method \int requirePersonalPhoto()
	 * @method \Craft\Model\CraftUser resetPersonalPhoto()
	 * @method \Craft\Model\CraftUser unsetPersonalPhoto()
	 * @method \int fillPersonalPhoto()
	 * @method \string getPersonalNotes()
	 * @method \Craft\Model\CraftUser setPersonalNotes(\string|\Bitrix\Main\DB\SqlExpression $personalNotes)
	 * @method bool hasPersonalNotes()
	 * @method bool isPersonalNotesFilled()
	 * @method bool isPersonalNotesChanged()
	 * @method \string remindActualPersonalNotes()
	 * @method \string requirePersonalNotes()
	 * @method \Craft\Model\CraftUser resetPersonalNotes()
	 * @method \Craft\Model\CraftUser unsetPersonalNotes()
	 * @method \string fillPersonalNotes()
	 * @method \string getWorkCompany()
	 * @method \Craft\Model\CraftUser setWorkCompany(\string|\Bitrix\Main\DB\SqlExpression $workCompany)
	 * @method bool hasWorkCompany()
	 * @method bool isWorkCompanyFilled()
	 * @method bool isWorkCompanyChanged()
	 * @method \string remindActualWorkCompany()
	 * @method \string requireWorkCompany()
	 * @method \Craft\Model\CraftUser resetWorkCompany()
	 * @method \Craft\Model\CraftUser unsetWorkCompany()
	 * @method \string fillWorkCompany()
	 * @method \string getWorkDepartment()
	 * @method \Craft\Model\CraftUser setWorkDepartment(\string|\Bitrix\Main\DB\SqlExpression $workDepartment)
	 * @method bool hasWorkDepartment()
	 * @method bool isWorkDepartmentFilled()
	 * @method bool isWorkDepartmentChanged()
	 * @method \string remindActualWorkDepartment()
	 * @method \string requireWorkDepartment()
	 * @method \Craft\Model\CraftUser resetWorkDepartment()
	 * @method \Craft\Model\CraftUser unsetWorkDepartment()
	 * @method \string fillWorkDepartment()
	 * @method \string getWorkPhone()
	 * @method \Craft\Model\CraftUser setWorkPhone(\string|\Bitrix\Main\DB\SqlExpression $workPhone)
	 * @method bool hasWorkPhone()
	 * @method bool isWorkPhoneFilled()
	 * @method bool isWorkPhoneChanged()
	 * @method \string remindActualWorkPhone()
	 * @method \string requireWorkPhone()
	 * @method \Craft\Model\CraftUser resetWorkPhone()
	 * @method \Craft\Model\CraftUser unsetWorkPhone()
	 * @method \string fillWorkPhone()
	 * @method \string getWorkPosition()
	 * @method \Craft\Model\CraftUser setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Craft\Model\CraftUser resetWorkPosition()
	 * @method \Craft\Model\CraftUser unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getWorkWww()
	 * @method \Craft\Model\CraftUser setWorkWww(\string|\Bitrix\Main\DB\SqlExpression $workWww)
	 * @method bool hasWorkWww()
	 * @method bool isWorkWwwFilled()
	 * @method bool isWorkWwwChanged()
	 * @method \string remindActualWorkWww()
	 * @method \string requireWorkWww()
	 * @method \Craft\Model\CraftUser resetWorkWww()
	 * @method \Craft\Model\CraftUser unsetWorkWww()
	 * @method \string fillWorkWww()
	 * @method \string getWorkFax()
	 * @method \Craft\Model\CraftUser setWorkFax(\string|\Bitrix\Main\DB\SqlExpression $workFax)
	 * @method bool hasWorkFax()
	 * @method bool isWorkFaxFilled()
	 * @method bool isWorkFaxChanged()
	 * @method \string remindActualWorkFax()
	 * @method \string requireWorkFax()
	 * @method \Craft\Model\CraftUser resetWorkFax()
	 * @method \Craft\Model\CraftUser unsetWorkFax()
	 * @method \string fillWorkFax()
	 * @method \string getWorkPager()
	 * @method \Craft\Model\CraftUser setWorkPager(\string|\Bitrix\Main\DB\SqlExpression $workPager)
	 * @method bool hasWorkPager()
	 * @method bool isWorkPagerFilled()
	 * @method bool isWorkPagerChanged()
	 * @method \string remindActualWorkPager()
	 * @method \string requireWorkPager()
	 * @method \Craft\Model\CraftUser resetWorkPager()
	 * @method \Craft\Model\CraftUser unsetWorkPager()
	 * @method \string fillWorkPager()
	 * @method \string getWorkStreet()
	 * @method \Craft\Model\CraftUser setWorkStreet(\string|\Bitrix\Main\DB\SqlExpression $workStreet)
	 * @method bool hasWorkStreet()
	 * @method bool isWorkStreetFilled()
	 * @method bool isWorkStreetChanged()
	 * @method \string remindActualWorkStreet()
	 * @method \string requireWorkStreet()
	 * @method \Craft\Model\CraftUser resetWorkStreet()
	 * @method \Craft\Model\CraftUser unsetWorkStreet()
	 * @method \string fillWorkStreet()
	 * @method \string getWorkMailbox()
	 * @method \Craft\Model\CraftUser setWorkMailbox(\string|\Bitrix\Main\DB\SqlExpression $workMailbox)
	 * @method bool hasWorkMailbox()
	 * @method bool isWorkMailboxFilled()
	 * @method bool isWorkMailboxChanged()
	 * @method \string remindActualWorkMailbox()
	 * @method \string requireWorkMailbox()
	 * @method \Craft\Model\CraftUser resetWorkMailbox()
	 * @method \Craft\Model\CraftUser unsetWorkMailbox()
	 * @method \string fillWorkMailbox()
	 * @method \string getWorkCity()
	 * @method \Craft\Model\CraftUser setWorkCity(\string|\Bitrix\Main\DB\SqlExpression $workCity)
	 * @method bool hasWorkCity()
	 * @method bool isWorkCityFilled()
	 * @method bool isWorkCityChanged()
	 * @method \string remindActualWorkCity()
	 * @method \string requireWorkCity()
	 * @method \Craft\Model\CraftUser resetWorkCity()
	 * @method \Craft\Model\CraftUser unsetWorkCity()
	 * @method \string fillWorkCity()
	 * @method \string getWorkState()
	 * @method \Craft\Model\CraftUser setWorkState(\string|\Bitrix\Main\DB\SqlExpression $workState)
	 * @method bool hasWorkState()
	 * @method bool isWorkStateFilled()
	 * @method bool isWorkStateChanged()
	 * @method \string remindActualWorkState()
	 * @method \string requireWorkState()
	 * @method \Craft\Model\CraftUser resetWorkState()
	 * @method \Craft\Model\CraftUser unsetWorkState()
	 * @method \string fillWorkState()
	 * @method \string getWorkZip()
	 * @method \Craft\Model\CraftUser setWorkZip(\string|\Bitrix\Main\DB\SqlExpression $workZip)
	 * @method bool hasWorkZip()
	 * @method bool isWorkZipFilled()
	 * @method bool isWorkZipChanged()
	 * @method \string remindActualWorkZip()
	 * @method \string requireWorkZip()
	 * @method \Craft\Model\CraftUser resetWorkZip()
	 * @method \Craft\Model\CraftUser unsetWorkZip()
	 * @method \string fillWorkZip()
	 * @method \string getWorkCountry()
	 * @method \Craft\Model\CraftUser setWorkCountry(\string|\Bitrix\Main\DB\SqlExpression $workCountry)
	 * @method bool hasWorkCountry()
	 * @method bool isWorkCountryFilled()
	 * @method bool isWorkCountryChanged()
	 * @method \string remindActualWorkCountry()
	 * @method \string requireWorkCountry()
	 * @method \Craft\Model\CraftUser resetWorkCountry()
	 * @method \Craft\Model\CraftUser unsetWorkCountry()
	 * @method \string fillWorkCountry()
	 * @method \string getWorkProfile()
	 * @method \Craft\Model\CraftUser setWorkProfile(\string|\Bitrix\Main\DB\SqlExpression $workProfile)
	 * @method bool hasWorkProfile()
	 * @method bool isWorkProfileFilled()
	 * @method bool isWorkProfileChanged()
	 * @method \string remindActualWorkProfile()
	 * @method \string requireWorkProfile()
	 * @method \Craft\Model\CraftUser resetWorkProfile()
	 * @method \Craft\Model\CraftUser unsetWorkProfile()
	 * @method \string fillWorkProfile()
	 * @method \int getWorkLogo()
	 * @method \Craft\Model\CraftUser setWorkLogo(\int|\Bitrix\Main\DB\SqlExpression $workLogo)
	 * @method bool hasWorkLogo()
	 * @method bool isWorkLogoFilled()
	 * @method bool isWorkLogoChanged()
	 * @method \int remindActualWorkLogo()
	 * @method \int requireWorkLogo()
	 * @method \Craft\Model\CraftUser resetWorkLogo()
	 * @method \Craft\Model\CraftUser unsetWorkLogo()
	 * @method \int fillWorkLogo()
	 * @method \string getWorkNotes()
	 * @method \Craft\Model\CraftUser setWorkNotes(\string|\Bitrix\Main\DB\SqlExpression $workNotes)
	 * @method bool hasWorkNotes()
	 * @method bool isWorkNotesFilled()
	 * @method bool isWorkNotesChanged()
	 * @method \string remindActualWorkNotes()
	 * @method \string requireWorkNotes()
	 * @method \Craft\Model\CraftUser resetWorkNotes()
	 * @method \Craft\Model\CraftUser unsetWorkNotes()
	 * @method \string fillWorkNotes()
	 * @method \string getAdminNotes()
	 * @method \Craft\Model\CraftUser setAdminNotes(\string|\Bitrix\Main\DB\SqlExpression $adminNotes)
	 * @method bool hasAdminNotes()
	 * @method bool isAdminNotesFilled()
	 * @method bool isAdminNotesChanged()
	 * @method \string remindActualAdminNotes()
	 * @method \string requireAdminNotes()
	 * @method \Craft\Model\CraftUser resetAdminNotes()
	 * @method \Craft\Model\CraftUser unsetAdminNotes()
	 * @method \string fillAdminNotes()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Craft\Model\CraftUser unsetShortName()
	 * @method \string fillShortName()
	 * @method \boolean getIsOnline()
	 * @method \boolean remindActualIsOnline()
	 * @method \boolean requireIsOnline()
	 * @method bool hasIsOnline()
	 * @method bool isIsOnlineFilled()
	 * @method \Craft\Model\CraftUser unsetIsOnline()
	 * @method \boolean fillIsOnline()
	 * @method \boolean getIsRealUser()
	 * @method \boolean remindActualIsRealUser()
	 * @method \boolean requireIsRealUser()
	 * @method bool hasIsRealUser()
	 * @method bool isIsRealUserFilled()
	 * @method \Craft\Model\CraftUser unsetIsRealUser()
	 * @method \boolean fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex getIndex()
	 * @method \Bitrix\Main\EO_UserIndex remindActualIndex()
	 * @method \Bitrix\Main\EO_UserIndex requireIndex()
	 * @method \Craft\Model\CraftUser setIndex(\Bitrix\Main\EO_UserIndex $object)
	 * @method \Craft\Model\CraftUser resetIndex()
	 * @method \Craft\Model\CraftUser unsetIndex()
	 * @method bool hasIndex()
	 * @method bool isIndexFilled()
	 * @method bool isIndexChanged()
	 * @method \Bitrix\Main\EO_UserIndex fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter getCounter()
	 * @method \Bitrix\Main\EO_UserCounter remindActualCounter()
	 * @method \Bitrix\Main\EO_UserCounter requireCounter()
	 * @method \Craft\Model\CraftUser setCounter(\Bitrix\Main\EO_UserCounter $object)
	 * @method \Craft\Model\CraftUser resetCounter()
	 * @method \Craft\Model\CraftUser unsetCounter()
	 * @method bool hasCounter()
	 * @method bool isCounterFilled()
	 * @method bool isCounterChanged()
	 * @method \Bitrix\Main\EO_UserCounter fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth getPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth remindActualPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth requirePhoneAuth()
	 * @method \Craft\Model\CraftUser setPhoneAuth(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method \Craft\Model\CraftUser resetPhoneAuth()
	 * @method \Craft\Model\CraftUser unsetPhoneAuth()
	 * @method bool hasPhoneAuth()
	 * @method bool isPhoneAuthFilled()
	 * @method bool isPhoneAuthChanged()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection requireGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method bool hasGroups()
	 * @method bool isGroupsFilled()
	 * @method bool isGroupsChanged()
	 * @method void addToGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeFromGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeAllGroups()
	 * @method \Craft\Model\CraftUser resetGroups()
	 * @method \Craft\Model\CraftUser unsetGroups()
	 * @method \Bitrix\Main\Localization\EO_Language getActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language remindActualActiveLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language requireActiveLanguage()
	 * @method \Craft\Model\CraftUser setActiveLanguage(\Bitrix\Main\Localization\EO_Language $object)
	 * @method \Craft\Model\CraftUser resetActiveLanguage()
	 * @method \Craft\Model\CraftUser unsetActiveLanguage()
	 * @method bool hasActiveLanguage()
	 * @method bool isActiveLanguageFilled()
	 * @method bool isActiveLanguageChanged()
	 * @method \Bitrix\Main\Localization\EO_Language fillActiveLanguage()
	 * @method \string getNotificationLanguageId()
	 * @method \string remindActualNotificationLanguageId()
	 * @method \string requireNotificationLanguageId()
	 * @method bool hasNotificationLanguageId()
	 * @method bool isNotificationLanguageIdFilled()
	 * @method \Craft\Model\CraftUser unsetNotificationLanguageId()
	 * @method \string fillNotificationLanguageId()
	 * @method \Craft\Model\EO_CraftUserUts getUtsObject()
	 * @method \Craft\Model\EO_CraftUserUts remindActualUtsObject()
	 * @method \Craft\Model\EO_CraftUserUts requireUtsObject()
	 * @method \Craft\Model\CraftUser setUtsObject(\Craft\Model\EO_CraftUserUts $object)
	 * @method \Craft\Model\CraftUser resetUtsObject()
	 * @method \Craft\Model\CraftUser unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Craft\Model\EO_CraftUserUts fillUtsObject()
	 * @method \string getUfInn()
	 * @method \string remindActualUfInn()
	 * @method \string requireUfInn()
	 * @method bool hasUfInn()
	 * @method bool isUfInnFilled()
	 * @method \Craft\Model\CraftUser unsetUfInn()
	 * @method \string fillUfInn()
	 * @method \Craft\Model\CraftUser setUfInn(\string $ufInn)
	 * @method bool isUfInnChanged()
	 * @method \string getUfOgrn()
	 * @method \string remindActualUfOgrn()
	 * @method \string requireUfOgrn()
	 * @method bool hasUfOgrn()
	 * @method bool isUfOgrnFilled()
	 * @method \Craft\Model\CraftUser unsetUfOgrn()
	 * @method \string fillUfOgrn()
	 * @method \Craft\Model\CraftUser setUfOgrn(\string $ufOgrn)
	 * @method bool isUfOgrnChanged()
	 * @method \string getUfCorrAcc()
	 * @method \string remindActualUfCorrAcc()
	 * @method \string requireUfCorrAcc()
	 * @method bool hasUfCorrAcc()
	 * @method bool isUfCorrAccFilled()
	 * @method \Craft\Model\CraftUser unsetUfCorrAcc()
	 * @method \string fillUfCorrAcc()
	 * @method \Craft\Model\CraftUser setUfCorrAcc(\string $ufCorrAcc)
	 * @method bool isUfCorrAccChanged()
	 * @method \string getUfCurrAcc()
	 * @method \string remindActualUfCurrAcc()
	 * @method \string requireUfCurrAcc()
	 * @method bool hasUfCurrAcc()
	 * @method bool isUfCurrAccFilled()
	 * @method \Craft\Model\CraftUser unsetUfCurrAcc()
	 * @method \string fillUfCurrAcc()
	 * @method \Craft\Model\CraftUser setUfCurrAcc(\string $ufCurrAcc)
	 * @method bool isUfCurrAccChanged()
	 * @method \string getUfKpp()
	 * @method \string remindActualUfKpp()
	 * @method \string requireUfKpp()
	 * @method bool hasUfKpp()
	 * @method bool isUfKppFilled()
	 * @method \Craft\Model\CraftUser unsetUfKpp()
	 * @method \string fillUfKpp()
	 * @method \Craft\Model\CraftUser setUfKpp(\string $ufKpp)
	 * @method bool isUfKppChanged()
	 * @method \string getUfBik()
	 * @method \string remindActualUfBik()
	 * @method \string requireUfBik()
	 * @method bool hasUfBik()
	 * @method bool isUfBikFilled()
	 * @method \Craft\Model\CraftUser unsetUfBik()
	 * @method \string fillUfBik()
	 * @method \Craft\Model\CraftUser setUfBik(\string $ufBik)
	 * @method bool isUfBikChanged()
	 * @method \string getUfPostAddress()
	 * @method \string remindActualUfPostAddress()
	 * @method \string requireUfPostAddress()
	 * @method bool hasUfPostAddress()
	 * @method bool isUfPostAddressFilled()
	 * @method \Craft\Model\CraftUser unsetUfPostAddress()
	 * @method \string fillUfPostAddress()
	 * @method \Craft\Model\CraftUser setUfPostAddress(\string $ufPostAddress)
	 * @method bool isUfPostAddressChanged()
	 * @method \string getUfLegalAddress()
	 * @method \string remindActualUfLegalAddress()
	 * @method \string requireUfLegalAddress()
	 * @method bool hasUfLegalAddress()
	 * @method bool isUfLegalAddressFilled()
	 * @method \Craft\Model\CraftUser unsetUfLegalAddress()
	 * @method \string fillUfLegalAddress()
	 * @method \Craft\Model\CraftUser setUfLegalAddress(\string $ufLegalAddress)
	 * @method bool isUfLegalAddressChanged()
	 * @method \string getUfBankName()
	 * @method \string remindActualUfBankName()
	 * @method \string requireUfBankName()
	 * @method bool hasUfBankName()
	 * @method bool isUfBankNameFilled()
	 * @method \Craft\Model\CraftUser unsetUfBankName()
	 * @method \string fillUfBankName()
	 * @method \Craft\Model\CraftUser setUfBankName(\string $ufBankName)
	 * @method bool isUfBankNameChanged()
	 * @method \Craft\Model\EO_CraftUserUts getUtsObjectInner()
	 * @method \Craft\Model\EO_CraftUserUts remindActualUtsObjectInner()
	 * @method \Craft\Model\EO_CraftUserUts requireUtsObjectInner()
	 * @method \Craft\Model\CraftUser setUtsObjectInner(\Craft\Model\EO_CraftUserUts $object)
	 * @method \Craft\Model\CraftUser resetUtsObjectInner()
	 * @method \Craft\Model\CraftUser unsetUtsObjectInner()
	 * @method bool hasUtsObjectInner()
	 * @method bool isUtsObjectInnerFilled()
	 * @method bool isUtsObjectInnerChanged()
	 * @method \Craft\Model\EO_CraftUserUts fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\Model\CraftUser set($fieldName, $value)
	 * @method \Craft\Model\CraftUser reset($fieldName)
	 * @method \Craft\Model\CraftUser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\Model\CraftUser wakeUp($data)
	 */
	class EO_CraftUser {
		/* @var \Craft\Model\CraftUserTable */
		static public $dataClass = '\Craft\Model\CraftUserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\Model {
	/**
	 * EO_CraftUser_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getBlockedList()
	 * @method \boolean[] fillBlocked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegisterList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastActivityDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getExternalAuthIdList()
	 * @method \string[] fillExternalAuthId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getTimeZoneList()
	 * @method \string[] fillTimeZone()
	 * @method \int[] getTimeZoneOffsetList()
	 * @method \int[] fillTimeZoneOffset()
	 * @method \string[] getPersonalProfessionList()
	 * @method \string[] fillPersonalProfession()
	 * @method \string[] getPersonalPhoneList()
	 * @method \string[] fillPersonalPhone()
	 * @method \string[] getPersonalMobileList()
	 * @method \string[] fillPersonalMobile()
	 * @method \string[] getPersonalWwwList()
	 * @method \string[] fillPersonalWww()
	 * @method \string[] getPersonalIcqList()
	 * @method \string[] fillPersonalIcq()
	 * @method \string[] getPersonalFaxList()
	 * @method \string[] fillPersonalFax()
	 * @method \string[] getPersonalPagerList()
	 * @method \string[] fillPersonalPager()
	 * @method \string[] getPersonalStreetList()
	 * @method \string[] fillPersonalStreet()
	 * @method \string[] getPersonalMailboxList()
	 * @method \string[] fillPersonalMailbox()
	 * @method \string[] getPersonalCityList()
	 * @method \string[] fillPersonalCity()
	 * @method \string[] getPersonalStateList()
	 * @method \string[] fillPersonalState()
	 * @method \string[] getPersonalZipList()
	 * @method \string[] fillPersonalZip()
	 * @method \string[] getPersonalCountryList()
	 * @method \string[] fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date[] getPersonalBirthdayList()
	 * @method \Bitrix\Main\Type\Date[] fillPersonalBirthday()
	 * @method \string[] getPersonalGenderList()
	 * @method \string[] fillPersonalGender()
	 * @method \int[] getPersonalPhotoList()
	 * @method \int[] fillPersonalPhoto()
	 * @method \string[] getPersonalNotesList()
	 * @method \string[] fillPersonalNotes()
	 * @method \string[] getWorkCompanyList()
	 * @method \string[] fillWorkCompany()
	 * @method \string[] getWorkDepartmentList()
	 * @method \string[] fillWorkDepartment()
	 * @method \string[] getWorkPhoneList()
	 * @method \string[] fillWorkPhone()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getWorkWwwList()
	 * @method \string[] fillWorkWww()
	 * @method \string[] getWorkFaxList()
	 * @method \string[] fillWorkFax()
	 * @method \string[] getWorkPagerList()
	 * @method \string[] fillWorkPager()
	 * @method \string[] getWorkStreetList()
	 * @method \string[] fillWorkStreet()
	 * @method \string[] getWorkMailboxList()
	 * @method \string[] fillWorkMailbox()
	 * @method \string[] getWorkCityList()
	 * @method \string[] fillWorkCity()
	 * @method \string[] getWorkStateList()
	 * @method \string[] fillWorkState()
	 * @method \string[] getWorkZipList()
	 * @method \string[] fillWorkZip()
	 * @method \string[] getWorkCountryList()
	 * @method \string[] fillWorkCountry()
	 * @method \string[] getWorkProfileList()
	 * @method \string[] fillWorkProfile()
	 * @method \int[] getWorkLogoList()
	 * @method \int[] fillWorkLogo()
	 * @method \string[] getWorkNotesList()
	 * @method \string[] fillWorkNotes()
	 * @method \string[] getAdminNotesList()
	 * @method \string[] fillAdminNotes()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \boolean[] getIsOnlineList()
	 * @method \boolean[] fillIsOnline()
	 * @method \boolean[] getIsRealUserList()
	 * @method \boolean[] fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex[] getIndexList()
	 * @method \Craft\Model\EO_CraftUser_Collection getIndexCollection()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fillIndex()
	 * @method \Bitrix\Main\EO_UserCounter[] getCounterList()
	 * @method \Craft\Model\EO_CraftUser_Collection getCounterCollection()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getPhoneAuthList()
	 * @method \Craft\Model\EO_CraftUser_Collection getPhoneAuthCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection[] getGroupsList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupsCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method \Bitrix\Main\Localization\EO_Language[] getActiveLanguageList()
	 * @method \Craft\Model\EO_CraftUser_Collection getActiveLanguageCollection()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fillActiveLanguage()
	 * @method \string[] getNotificationLanguageIdList()
	 * @method \string[] fillNotificationLanguageId()
	 * @method \Craft\Model\EO_CraftUserUts[] getUtsObjectList()
	 * @method \Craft\Model\EO_CraftUser_Collection getUtsObjectCollection()
	 * @method \Craft\Model\EO_CraftUserUts_Collection fillUtsObject()
	 * @method \string[] getUfInnList()
	 * @method \string[] fillUfInn()
	 * @method \string[] getUfOgrnList()
	 * @method \string[] fillUfOgrn()
	 * @method \string[] getUfCorrAccList()
	 * @method \string[] fillUfCorrAcc()
	 * @method \string[] getUfCurrAccList()
	 * @method \string[] fillUfCurrAcc()
	 * @method \string[] getUfKppList()
	 * @method \string[] fillUfKpp()
	 * @method \string[] getUfBikList()
	 * @method \string[] fillUfBik()
	 * @method \string[] getUfPostAddressList()
	 * @method \string[] fillUfPostAddress()
	 * @method \string[] getUfLegalAddressList()
	 * @method \string[] fillUfLegalAddress()
	 * @method \string[] getUfBankNameList()
	 * @method \string[] fillUfBankName()
	 * @method \Craft\Model\EO_CraftUserUts[] getUtsObjectInnerList()
	 * @method \Craft\Model\EO_CraftUser_Collection getUtsObjectInnerCollection()
	 * @method \Craft\Model\EO_CraftUserUts_Collection fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\Model\CraftUser $object)
	 * @method bool has(\Craft\Model\CraftUser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\Model\CraftUser getByPrimary($primary)
	 * @method \Craft\Model\CraftUser[] getAll()
	 * @method bool remove(\Craft\Model\CraftUser $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\Model\EO_CraftUser_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\Model\CraftUser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\Model\EO_CraftUser_Collection merge(?\Craft\Model\EO_CraftUser_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_CraftUser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\Model\CraftUserTable */
		static public $dataClass = '\Craft\Model\CraftUserTable';
	}
}
namespace Craft\Model {
	/**
	 * @method static EO_CraftUser_Query query()
	 * @method static EO_CraftUser_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_CraftUser_Result getById($id)
	 * @method static EO_CraftUser_Result getList(array $parameters = [])
	 * @method static EO_CraftUser_Entity getEntity()
	 * @method static \Craft\Model\CraftUser createObject($setDefaultValues = true)
	 * @method static \Craft\Model\EO_CraftUser_Collection createCollection()
	 * @method static \Craft\Model\CraftUser wakeUpObject($row)
	 * @method static \Craft\Model\EO_CraftUser_Collection wakeUpCollection($rows)
	 */
	class CraftUserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CraftUser_Result exec()
	 * @method \Craft\Model\CraftUser fetchObject()
	 * @method \Craft\Model\EO_CraftUser_Collection fetchCollection()
	 */
	class EO_CraftUser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\Model\CraftUser fetchObject()
	 * @method \Craft\Model\EO_CraftUser_Collection fetchCollection()
	 */
	class EO_CraftUser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\Model\CraftUser createObject($setDefaultValues = true)
	 * @method \Craft\Model\EO_CraftUser_Collection createCollection()
	 * @method \Craft\Model\CraftUser wakeUpObject($row)
	 * @method \Craft\Model\EO_CraftUser_Collection wakeUpCollection($rows)
	 */
	class EO_CraftUser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\DDD\Claims\Infrastructure\Entity\ClaimTable */
namespace Craft\DDD\Claims\Infrastructure\Entity {
	/**
	 * Claim
	 * @see \Craft\DDD\Claims\Infrastructure\Entity\ClaimTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetName()
	 * @method \string fillName()
	 * @method \string getEmail()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetEmail()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetEmail()
	 * @method \string fillEmail()
	 * @method \string getPhone()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setPhone(\string|\Bitrix\Main\DB\SqlExpression $phone)
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method bool isPhoneChanged()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetPhone()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetPhone()
	 * @method \string fillPhone()
	 * @method \string getClient()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setClient(\string|\Bitrix\Main\DB\SqlExpression $client)
	 * @method bool hasClient()
	 * @method bool isClientFilled()
	 * @method bool isClientChanged()
	 * @method \string remindActualClient()
	 * @method \string requireClient()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetClient()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetClient()
	 * @method \string fillClient()
	 * @method \int getInn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setInn(\int|\Bitrix\Main\DB\SqlExpression $inn)
	 * @method bool hasInn()
	 * @method bool isInnFilled()
	 * @method bool isInnChanged()
	 * @method \int remindActualInn()
	 * @method \int requireInn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetInn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetInn()
	 * @method \int fillInn()
	 * @method \int getOgrn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setOgrn(\int|\Bitrix\Main\DB\SqlExpression $ogrn)
	 * @method bool hasOgrn()
	 * @method bool isOgrnFilled()
	 * @method bool isOgrnChanged()
	 * @method \int remindActualOgrn()
	 * @method \int requireOgrn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetOgrn()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetOgrn()
	 * @method \int fillOgrn()
	 * @method \int getKpp()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setKpp(\int|\Bitrix\Main\DB\SqlExpression $kpp)
	 * @method bool hasKpp()
	 * @method bool isKppFilled()
	 * @method bool isKppChanged()
	 * @method \int remindActualKpp()
	 * @method \int requireKpp()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetKpp()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetKpp()
	 * @method \int fillKpp()
	 * @method \int getBik()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setBik(\int|\Bitrix\Main\DB\SqlExpression $bik)
	 * @method bool hasBik()
	 * @method bool isBikFilled()
	 * @method bool isBikChanged()
	 * @method \int remindActualBik()
	 * @method \int requireBik()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetBik()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetBik()
	 * @method \int fillBik()
	 * @method \string getCurrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setCurrAcc(\string|\Bitrix\Main\DB\SqlExpression $currAcc)
	 * @method bool hasCurrAcc()
	 * @method bool isCurrAccFilled()
	 * @method bool isCurrAccChanged()
	 * @method \string remindActualCurrAcc()
	 * @method \string requireCurrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetCurrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetCurrAcc()
	 * @method \string fillCurrAcc()
	 * @method \string getCorrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setCorrAcc(\string|\Bitrix\Main\DB\SqlExpression $corrAcc)
	 * @method bool hasCorrAcc()
	 * @method bool isCorrAccFilled()
	 * @method bool isCorrAccChanged()
	 * @method \string remindActualCorrAcc()
	 * @method \string requireCorrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetCorrAcc()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetCorrAcc()
	 * @method \string fillCorrAcc()
	 * @method \int getLegalAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setLegalAddress(\int|\Bitrix\Main\DB\SqlExpression $legalAddress)
	 * @method bool hasLegalAddress()
	 * @method bool isLegalAddressFilled()
	 * @method bool isLegalAddressChanged()
	 * @method \int remindActualLegalAddress()
	 * @method \int requireLegalAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetLegalAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetLegalAddress()
	 * @method \int fillLegalAddress()
	 * @method \int getPostAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setPostAddress(\int|\Bitrix\Main\DB\SqlExpression $postAddress)
	 * @method bool hasPostAddress()
	 * @method bool isPostAddressFilled()
	 * @method bool isPostAddressChanged()
	 * @method \int remindActualPostAddress()
	 * @method \int requirePostAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetPostAddress()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetPostAddress()
	 * @method \int fillPostAddress()
	 * @method \int getBankName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setBankName(\int|\Bitrix\Main\DB\SqlExpression $bankName)
	 * @method bool hasBankName()
	 * @method bool isBankNameFilled()
	 * @method bool isBankNameChanged()
	 * @method \int remindActualBankName()
	 * @method \int requireBankName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetBankName()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetBankName()
	 * @method \int fillBankName()
	 * @method \int getUserId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetUserId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getBuildObjectId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setBuildObjectId(\int|\Bitrix\Main\DB\SqlExpression $buildObjectId)
	 * @method bool hasBuildObjectId()
	 * @method bool isBuildObjectIdFilled()
	 * @method bool isBuildObjectIdChanged()
	 * @method \int remindActualBuildObjectId()
	 * @method \int requireBuildObjectId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetBuildObjectId()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetBuildObjectId()
	 * @method \int fillBuildObjectId()
	 * @method \boolean getActive()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetActive()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetCreatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim resetUpdatedAt()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim set($fieldName, $value)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim reset($fieldName)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\Claim wakeUp($data)
	 */
	class EO_Claim {
		/* @var \Craft\DDD\Claims\Infrastructure\Entity\ClaimTable */
		static public $dataClass = '\Craft\DDD\Claims\Infrastructure\Entity\ClaimTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\DDD\Claims\Infrastructure\Entity {
	/**
	 * EO_Claim_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \string[] getClientList()
	 * @method \string[] fillClient()
	 * @method \int[] getInnList()
	 * @method \int[] fillInn()
	 * @method \int[] getOgrnList()
	 * @method \int[] fillOgrn()
	 * @method \int[] getKppList()
	 * @method \int[] fillKpp()
	 * @method \int[] getBikList()
	 * @method \int[] fillBik()
	 * @method \string[] getCurrAccList()
	 * @method \string[] fillCurrAcc()
	 * @method \string[] getCorrAccList()
	 * @method \string[] fillCorrAcc()
	 * @method \int[] getLegalAddressList()
	 * @method \int[] fillLegalAddress()
	 * @method \int[] getPostAddressList()
	 * @method \int[] fillPostAddress()
	 * @method \int[] getBankNameList()
	 * @method \int[] fillBankName()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getBuildObjectIdList()
	 * @method \int[] fillBuildObjectId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\DDD\Claims\Infrastructure\Entity\Claim $object)
	 * @method bool has(\Craft\DDD\Claims\Infrastructure\Entity\Claim $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim getByPrimary($primary)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim[] getAll()
	 * @method bool remove(\Craft\DDD\Claims\Infrastructure\Entity\Claim $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection merge(?\Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_Claim_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\DDD\Claims\Infrastructure\Entity\ClaimTable */
		static public $dataClass = '\Craft\DDD\Claims\Infrastructure\Entity\ClaimTable';
	}
}
namespace Craft\DDD\Claims\Infrastructure\Entity {
	/**
	 * @method static EO_Claim_Query query()
	 * @method static EO_Claim_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_Claim_Result getById($id)
	 * @method static EO_Claim_Result getList(array $parameters = [])
	 * @method static EO_Claim_Entity getEntity()
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\Claim createObject($setDefaultValues = true)
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection createCollection()
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\Claim wakeUpObject($row)
	 * @method static \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection wakeUpCollection($rows)
	 */
	class ClaimTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Claim_Result exec()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim fetchObject()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection fetchCollection()
	 */
	class EO_Claim_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim fetchObject()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection fetchCollection()
	 */
	class EO_Claim_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim createObject($setDefaultValues = true)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection createCollection()
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\Claim wakeUpObject($row)
	 * @method \Craft\DDD\Claims\Infrastructure\Entity\EO_Claim_Collection wakeUpCollection($rows)
	 */
	class EO_Claim_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable */
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * Developer
	 * @see \Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \boolean getActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetName()
	 * @method \string fillName()
	 * @method \int getSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetSort()
	 * @method \int fillSort()
	 * @method \int getPictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setPictureId(\int|\Bitrix\Main\DB\SqlExpression $pictureId)
	 * @method bool hasPictureId()
	 * @method bool isPictureIdFilled()
	 * @method bool isPictureIdChanged()
	 * @method \int remindActualPictureId()
	 * @method \int requirePictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetPictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetPictureId()
	 * @method \int fillPictureId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer resetUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer set($fieldName, $value)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer reset($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Developer wakeUp($data)
	 */
	class EO_Developer {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable */
		static public $dataClass = '\Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * EO_Developer_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getPictureIdList()
	 * @method \int[] fillPictureId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\DDD\Developers\Infrastructure\Entity\Developer $object)
	 * @method bool has(\Craft\DDD\Developers\Infrastructure\Entity\Developer $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer getByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer[] getAll()
	 * @method bool remove(\Craft\DDD\Developers\Infrastructure\Entity\Developer $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection merge(?\Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_Developer_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable */
		static public $dataClass = '\Craft\DDD\Developers\Infrastructure\Entity\DeveloperTable';
	}
}
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * @method static EO_Developer_Query query()
	 * @method static EO_Developer_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_Developer_Result getById($id)
	 * @method static EO_Developer_Result getList(array $parameters = [])
	 * @method static EO_Developer_Entity getEntity()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Developer createObject($setDefaultValues = true)
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection createCollection()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Developer wakeUpObject($row)
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection wakeUpCollection($rows)
	 */
	class DeveloperTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Developer_Result exec()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer fetchObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection fetchCollection()
	 */
	class EO_Developer_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer fetchObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection fetchCollection()
	 */
	class EO_Developer_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer createObject($setDefaultValues = true)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection createCollection()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Developer wakeUpObject($row)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Developer_Collection wakeUpCollection($rows)
	 */
	class EO_Developer_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\DDD\Developers\Infrastructure\Entity\BuildObjectTable */
namespace Craft\DDD\Objects\Infrastructure\Entity {
	/**
	 * BuildObject
	 * @see \Craft\DDD\Developers\Infrastructure\Entity\BuildObjectTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDeveloperId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setDeveloperId(\int|\Bitrix\Main\DB\SqlExpression $developerId)
	 * @method bool hasDeveloperId()
	 * @method bool isDeveloperIdFilled()
	 * @method bool isDeveloperIdChanged()
	 * @method \int remindActualDeveloperId()
	 * @method \int requireDeveloperId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetDeveloperId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetDeveloperId()
	 * @method \int fillDeveloperId()
	 * @method \int getPictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setPictureId(\int|\Bitrix\Main\DB\SqlExpression $pictureId)
	 * @method bool hasPictureId()
	 * @method bool isPictureIdFilled()
	 * @method bool isPictureIdChanged()
	 * @method \int remindActualPictureId()
	 * @method \int requirePictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetPictureId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetPictureId()
	 * @method \int fillPictureId()
	 * @method \boolean getActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetSort()
	 * @method \int fillSort()
	 * @method \string getName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetName()
	 * @method \string fillName()
	 * @method \string getGallery()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setGallery(\string|\Bitrix\Main\DB\SqlExpression $gallery)
	 * @method bool hasGallery()
	 * @method bool isGalleryFilled()
	 * @method bool isGalleryChanged()
	 * @method \string remindActualGallery()
	 * @method \string requireGallery()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetGallery()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetGallery()
	 * @method \string fillGallery()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection getApartments()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection requireApartments()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection fillApartments()
	 * @method bool hasApartments()
	 * @method bool isApartmentsFilled()
	 * @method bool isApartmentsChanged()
	 * @method void addToApartments(\Craft\DDD\Developers\Infrastructure\Entity\Apartment $apartment)
	 * @method void removeFromApartments(\Craft\DDD\Developers\Infrastructure\Entity\Apartment $apartment)
	 * @method void removeAllApartments()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject resetApartments()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unsetApartments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject set($fieldName, $value)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject reset($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\BuildObject wakeUp($data)
	 */
	class EO_BuildObject {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\BuildObjectTable */
		static public $dataClass = '\Craft\DDD\Objects\Infrastructure\Entity\BuildObjectTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\DDD\Objects\Infrastructure\Entity {
	/**
	 * EO_BuildObject_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDeveloperIdList()
	 * @method \int[] fillDeveloperId()
	 * @method \int[] getPictureIdList()
	 * @method \int[] fillPictureId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getGalleryList()
	 * @method \string[] fillGallery()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection[] getApartmentsList()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection getApartmentsCollection()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection fillApartments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\DDD\Developers\Infrastructure\Entity\BuildObject $object)
	 * @method bool has(\Craft\DDD\Developers\Infrastructure\Entity\BuildObject $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject getByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject[] getAll()
	 * @method bool remove(\Craft\DDD\Developers\Infrastructure\Entity\BuildObject $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection merge(?\Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_BuildObject_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\BuildObjectTable */
		static public $dataClass = '\Craft\DDD\Objects\Infrastructure\Entity\BuildObjectTable';
	}
}
namespace Craft\DDD\Objects\Infrastructure\Entity {
	/**
	 * @method static EO_BuildObject_Query query()
	 * @method static EO_BuildObject_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_BuildObject_Result getById($id)
	 * @method static EO_BuildObject_Result getList(array $parameters = [])
	 * @method static EO_BuildObject_Entity getEntity()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\BuildObject createObject($setDefaultValues = true)
	 * @method static \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection createCollection()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\BuildObject wakeUpObject($row)
	 * @method static \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection wakeUpCollection($rows)
	 */
	class BuildObjectTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BuildObject_Result exec()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject fetchObject()
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection fetchCollection()
	 */
	class EO_BuildObject_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject fetchObject()
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection fetchCollection()
	 */
	class EO_BuildObject_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject createObject($setDefaultValues = true)
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection createCollection()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject wakeUpObject($row)
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection wakeUpCollection($rows)
	 */
	class EO_BuildObject_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable */
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * Apartment
	 * @see \Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetName()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetActive()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetSort()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetSort()
	 * @method \int fillSort()
	 * @method \string getCode()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetCode()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetCode()
	 * @method \string fillCode()
	 * @method \int getPrice()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setPrice(\int|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \int remindActualPrice()
	 * @method \int requirePrice()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetPrice()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetPrice()
	 * @method \int fillPrice()
	 * @method \int getPlanImageId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setPlanImageId(\int|\Bitrix\Main\DB\SqlExpression $planImageId)
	 * @method bool hasPlanImageId()
	 * @method bool isPlanImageIdFilled()
	 * @method bool isPlanImageIdChanged()
	 * @method \int remindActualPlanImageId()
	 * @method \int requirePlanImageId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetPlanImageId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetPlanImageId()
	 * @method \int fillPlanImageId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetCreatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetUpdatedAt()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 * @method \int getBuildObjectId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setBuildObjectId(\int|\Bitrix\Main\DB\SqlExpression $buildObjectId)
	 * @method bool hasBuildObjectId()
	 * @method bool isBuildObjectIdFilled()
	 * @method bool isBuildObjectIdChanged()
	 * @method \int remindActualBuildObjectId()
	 * @method \int requireBuildObjectId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetBuildObjectId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetBuildObjectId()
	 * @method \int fillBuildObjectId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject getBuildObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject remindActualBuildObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject requireBuildObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment setBuildObject(\Craft\DDD\Developers\Infrastructure\Entity\BuildObject $object)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment resetBuildObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unsetBuildObject()
	 * @method bool hasBuildObject()
	 * @method bool isBuildObjectFilled()
	 * @method bool isBuildObjectChanged()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject fillBuildObject()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment set($fieldName, $value)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment reset($fieldName)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method mixed fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Apartment wakeUp($data)
	 */
	class EO_Apartment {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable */
		static public $dataClass = '\Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * EO_Apartment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getPriceList()
	 * @method \int[] fillPrice()
	 * @method \int[] getPlanImageIdList()
	 * @method \int[] fillPlanImageId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 * @method \int[] getBuildObjectIdList()
	 * @method \int[] fillBuildObjectId()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\BuildObject[] getBuildObjectList()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection getBuildObjectCollection()
	 * @method \Craft\DDD\Objects\Infrastructure\Entity\EO_BuildObject_Collection fillBuildObject()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Craft\DDD\Developers\Infrastructure\Entity\Apartment $object)
	 * @method bool has(\Craft\DDD\Developers\Infrastructure\Entity\Apartment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment getByPrimary($primary)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment[] getAll()
	 * @method bool remove(\Craft\DDD\Developers\Infrastructure\Entity\Apartment $object)
	 * @method void removeByPrimary($primary)
	 * @method array|\Bitrix\Main\ORM\Objectify\Collection|null fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection merge(?\Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection $collection)
	 * @method bool isEmpty()
	 * @method array collectValues(int $valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, int $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL, bool $recursive = false)
	 */
	class EO_Apartment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable */
		static public $dataClass = '\Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable';
	}
}
namespace Craft\DDD\Developers\Infrastructure\Entity {
	/**
	 * @method static EO_Apartment_Query query()
	 * @method static EO_Apartment_Result getByPrimary($primary, array $parameters = [])
	 * @method static EO_Apartment_Result getById($id)
	 * @method static EO_Apartment_Result getList(array $parameters = [])
	 * @method static EO_Apartment_Entity getEntity()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Apartment createObject($setDefaultValues = true)
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection createCollection()
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\Apartment wakeUpObject($row)
	 * @method static \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection wakeUpCollection($rows)
	 */
	class ApartmentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Apartment_Result exec()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment fetchObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection fetchCollection()
	 */
	class EO_Apartment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment fetchObject()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection fetchCollection()
	 */
	class EO_Apartment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment createObject($setDefaultValues = true)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection createCollection()
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\Apartment wakeUpObject($row)
	 * @method \Craft\DDD\Developers\Infrastructure\Entity\EO_Apartment_Collection wakeUpCollection($rows)
	 */
	class EO_Apartment_Entity extends \Bitrix\Main\ORM\Entity {}
}