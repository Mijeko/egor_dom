<?php

namespace Craft\DDD\Developers\Infrastructure\Entity;

use Bitrix\Main\Entity\BooleanField;
use Bitrix\Main\ORM\Data\DataManager;
use Bitrix\Main\ORM\Event;
use Bitrix\Main\ORM\Fields\DatetimeField;
use Bitrix\Main\ORM\Fields\IntegerField;
use Bitrix\Main\ORM\Fields\Relations\OneToMany;
use Bitrix\Main\ORM\Fields\Relations\Reference;
use Bitrix\Main\ORM\Fields\StringField;
use Bitrix\Main\ORM\Query\Join;
use Bitrix\Main\Type\DateTime;
use Craft\DDD\City\Infrastructure\Entity\CityTable;
use Craft\DDD\Developers\Infrastructure\Entity\ApartmentTable;
use Craft\DDD\Developers\Infrastructure\Entity\BuildObject;

class BuildObjectTable extends DataManager
{

	const F_ID = 'ID';
	const F_DEVELOPER_ID = 'DEVELOPER_ID';
	const F_CITY_ID = 'CITY_ID';
	const F_ACTIVE = 'ACTIVE';
	const F_SORT = 'SORT';
	const F_NAME = 'NAME';
	const F_GALLERY = 'GALLERY';
	const F_FLOORS = 'FLOORS';
	const F_TYPE = 'TYPE';
	const F_LOCATION = 'LOCATION';
	const F_CREATED_AT = 'CREATED_AT';
	const F_UPDATED_AT = 'UPDATED_AT';


	const ACTIVE_Y = 'Y';
	const ACTIVE_N = 'N';

	const R_APARTMENTS = 'APARTMENTS';
	const R_DEVELOPER = 'DEVELOPER';
	const R_CITY = 'CITY';

	public static function getTableName()
	{
		return 'craft_build_objects';
	}

	public static function getMap()
	{
		return [
			(new IntegerField(self::F_ID))
				->configureTitle('ID')
				->configureAutocomplete()
				->configurePrimary(),
			(new IntegerField(self::F_DEVELOPER_ID))
				->configureTitle('ID застройщика')
				->configureRequired(),
			(new IntegerField(self::F_CITY_ID))
				->configureTitle('ID города')
				->configureRequired(),
			(new BooleanField(self::F_ACTIVE))
				->configureTitle('Активность')
				->configureDefaultValue(self::ACTIVE_Y)
				->configureValues(self::ACTIVE_N, self::ACTIVE_Y),
			(new IntegerField(self::F_SORT))
				->configureTitle('Сортировка')
				->configureDefaultValue(500),
			(new StringField(self::F_NAME))
				->configureTitle('Название объекта')
				->configureRequired(),
			(new StringField(self::F_GALLERY))
				->configureTitle('Галерея'),
			(new IntegerField(self::F_FLOORS))
				->configureTitle('Количество этажей'),
			(new StringField(self::F_TYPE))
				->configureTitle('Тип постройки'),
			(new StringField(self::F_LOCATION))
				->configureTitle('Геопозиция'),
			(new DatetimeField(self::F_CREATED_AT))
				->configureTitle('Дата создания')
				->configureDefaultValue(new DateTime()),
			(new DatetimeField(self::F_UPDATED_AT))
				->configureDefaultValue(new DateTime()),


			(new OneToMany(
				self::R_APARTMENTS,
				ApartmentTable::class,
				ApartmentTable::R_BUILD_OBJECT
			)),

			(new Reference(
				self::R_DEVELOPER,
				DeveloperTable::class,
				Join::on('this.' . self::F_DEVELOPER_ID, 'ref.' . DeveloperTable::F_ID)
			))
				->configureJoinType('left'),

			(new Reference(
				self::R_CITY,
				CityTable::class,
				Join::on('this.' . self::F_CITY_ID, 'ref.' . CityTable::F_ID)
			))
				->configureJoinType('left'),
		];
	}

	public static function getObjectClass()
	{
		return BuildObject::class;
	}

	public static function update($primary, array $data)
	{

		if($data[self::F_GALLERY])
		{
			$model = self::getByPrimary($primary)->fetchObject();
			$galleryIdList = $model->getGalleryEx();
			foreach($galleryIdList as $galleryId)
			{
				\CFile::Delete($galleryId);
			}
		}

		return parent::update($primary, $data);
	}

	public static function delete($primary)
	{
		$model = self::getByPrimary($primary)->fetchObject();
		$galleryIdList = $model->getGalleryEx();
		foreach($galleryIdList as $galleryId)
		{
			\CFile::Delete($galleryId);
		}

		return parent::delete($primary); // TODO: Change the autogenerated stub
	}
}